{"EDITOR_STATE":{"allProjectFiles":{"8c1a52d9-348e-41b7-91b4-671c2e9dda20":{"id":"8c1a52d9-348e-41b7-91b4-671c2e9dda20","parent":null,"name":"Hermes","type":"DIRECTORY","isDirectory":true,"children":["88f9c76b-bc77-4aad-8290-d45b3774f439"],"isRemovable":false,"filePath":"Hermes"},"88f9c76b-bc77-4aad-8290-d45b3774f439":{"id":"88f9c76b-bc77-4aad-8290-d45b3774f439","parent":"8c1a52d9-348e-41b7-91b4-671c2e9dda20","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"Hermes/lambda.js","code":"const AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\nconst puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst request = require('request-promise-native');\n\nexports.handler = function (event, context, callback) {\n\t(async () => {\n\t\tconst browser = await puppeteer.launch();\n\t\tconst page = await browser.newPage();\n\n\t\tconst url = 'http://pesquisa.doe.seplag.ce.gov.br/doepesquisa/sead.do?page=ultimasDetalhe&cmd=10&action=Cadernos&data=20180709';\n\n\t\tawait page.goto(url);\n\t\tawait page._client.send('Page.setDownloadBehavior', {\n\t\t\tbehavior: 'allow',\n\t\t\tdownloadPath: './'\n\t\t});\n\n\t\tconst urls = await page.$$eval('a', anchors => {\n\t\t\tconst list = [];\n\n\t\t\tfor (let anchor of anchors) {\n\t\t\t\tlist.push(anchor.href)\n\t\t\t}\n\n\t\t\treturn list;\n\t\t});\n\n\t\tawait browser.close();\n\n\t\tfor (let url of urls) {\n\t\t\tconst file = await request(url);\n\t\t\tconst name = await url.replace(/^.*?([^\\\\\\/]*)$/, '$1');\n\n\t\t\ts3.putObject({\n\t\t\t\t\"Body\": file,\n\t\t\t\t\"Bucket\": \"elysium-hermes-test\",\n\t\t\t\t\"Key\": name,\n\t\t\t\t\"ACL\": \"public-read\"\n\t\t\t})\n\t\t\t\t.promise()\n\t\t\t\t.then(data => {\n\t\t\t\t\tconsole.log(data);           // successful response\n\t\t\t\t\t/*\n\t\t\t\t\tdata = {\n\t\t\t\t\t\tETag: \"\\\\\"6805f2cfc46c0f04559748bb039d69ae\\\\\"\", \n\t\t\t\t\t\tVersionId: \"pSKidl4pHBiNwukdbcPXAIs.sshFFOc0\"\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log(err, err.stack); // an error occurred\n\t\t\t\t});\n\t\t}\n\t})();\n}","triggers":[{"resourceName":"cweScrapeeveryday","config":{}}],"config":{"memory":128,"timeout":20,"runtime":"nodejs8.10"},"version":89,"syncVersion":39,"references":[]}},"rootNode":"8c1a52d9-348e-41b7-91b4-671c2e9dda20","openFiles":["88f9c76b-bc77-4aad-8290-d45b3774f439"],"currentFileId":"88f9c76b-bc77-4aad-8290-d45b3774f439","resources":{"cweScrapeeveryday":{"name":"cweScrapeeveryday","type":"CLOUD_WATCH","config":{"mode":0,"name":"Scrapeeveryday","description":"","scheduleExpression":"rate(1 day)"},"globallyEditable":true},"s3direitodiario":{"name":"s3direitodiario","type":"S3","config":{"mode":1,"bucket":{"region":"us-east-1","name":"direitodiario"}},"globallyEditable":false},"s3elysiumHermesTest":{"name":"s3elysiumHermesTest","type":"S3","config":{"mode":0,"bucket":{"region":"us-east-1","name":"elysium-hermes-test"}},"globallyEditable":false}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"puppeteer":{"name":"puppeteer","downloadsLast30Days":1334281,"downloadsRatio":0.005827678069106958,"humanDownloadsLast30Days":"1.3m","popular":true,"version":"1.5.0","versions":{"0.0.0":"2013-03-23T01:44:48.111Z","0.9.0":"2017-08-16T15:24:41.336Z","0.10.0":"2017-08-25T01:17:29.068Z","0.10.1":"2017-08-26T02:43:27.787Z","0.10.2":"2017-09-02T04:04:52.227Z","0.11.0":"2017-09-21T05:47:11.714Z","0.12.0":"2017-10-14T16:56:25.974Z","0.13.0":"2017-11-11T02:24:56.507Z","1.0.0-rc":"2017-12-28T22:31:49.054Z","1.0.0-next.1514510476874":"2017-12-29T01:21:26.173Z","1.0.0-next.1514951743425":"2018-01-03T03:55:55.857Z","1.0.0-next.1515022965203":"2018-01-03T23:42:51.854Z","1.0.0-next.1515032607003":"2018-01-04T02:23:37.178Z","1.0.0-next.1515061835903":"2018-01-04T10:30:49.360Z","1.0.0-next.1515092222354":"2018-01-04T18:57:17.126Z","1.0.0-next.1515094434782":"2018-01-04T19:34:07.865Z","1.0.0-next.1515095370840":"2018-01-04T19:49:42.411Z","1.0.0-next.1515096688553":"2018-01-04T20:11:43.652Z","1.0.0-next.1515102886297":"2018-01-04T21:54:59.560Z","1.0.0-next.1515107202232":"2018-01-04T23:06:53.551Z","1.0.0-next.1515176243781":"2018-01-05T18:17:32.919Z","1.0.0-next.1515449879873":"2018-01-08T22:18:14.407Z","1.0.0-next.1515453229229":"2018-01-08T23:13:59.085Z","1.0.0-next.1515460930569":"2018-01-09T01:22:22.458Z","1.0.0-next.1515463858907":"2018-01-09T02:11:10.803Z","1.0.0-next.1515463970965":"2018-01-09T02:13:00.852Z","1.0.0-next.1515544418139":"2018-01-10T00:33:47.486Z","1.0.0-next.1515546200351":"2018-01-10T01:11:28.981Z","1.0.0-next.1515552562439":"2018-01-10T02:49:32.136Z","1.0.0-next.1515563875372":"2018-01-10T05:58:06.419Z","1.0.0-next.1515567769425":"2018-01-10T07:03:01.624Z","1.0.0-next.1515568144024":"2018-01-10T07:09:16.279Z","1.0.0-next.1515618391320":"2018-01-10T21:06:44.186Z","1.0.0-next.1515641713768":"2018-01-11T03:35:24.121Z","1.0.0-next.1515659454855":"2018-01-11T08:31:07.822Z","1.0.0-next.1515702182453":"2018-01-11T20:23:14.898Z","1.0.0-next.1515707096515":"2018-01-11T21:45:10.154Z","1.0.0-next.1515712659552":"2018-01-11T23:17:50.316Z","1.0.0":"2018-01-12T03:51:29.954Z","1.0.0-next.1515733912424":"2018-01-12T05:12:05.628Z","1.0.0-next.1515745145135":"2018-01-12T08:19:18.637Z","1.0.0-next.1515786200433":"2018-01-12T19:43:31.691Z","1.0.0-next.1516189923095":"2018-01-17T11:52:14.904Z","1.0.0-next.1516255441715":"2018-01-18T06:04:14.377Z","1.0.0-next.1516339380944":"2018-01-19T05:23:12.160Z","1.0.0-next.1516339397474":"2018-01-19T05:23:34.236Z","1.0.0-next.1516340514293":"2018-01-19T05:42:06.027Z","1.0.0-next.1516351540753":"2018-01-19T08:45:53.929Z","1.0.0-next.1516663116955":"2018-01-22T23:18:48.144Z","1.0.0-next.1516666407998":"2018-01-23T00:13:37.532Z","1.0.0-next.1516668517979":"2018-01-23T00:48:50.133Z","1.0.0-next.1516669982697":"2018-01-23T01:13:13.946Z","1.0.0-next.1516857257758":"2018-01-25T05:14:31.017Z","1.0.0-next.1516857487583":"2018-01-25T05:18:19.188Z","1.0.0-next.1516920787679":"2018-01-25T22:53:24.388Z","1.0.0-next.1517036516784":"2018-01-27T07:02:08.290Z","1.0.0-next.1517354775230":"2018-01-30T23:26:31.665Z","1.0.0-next.1517441618294":"2018-01-31T23:33:52.138Z","1.0.0-next.1517443479601":"2018-02-01T00:04:51.353Z","1.0.0-next.1517859708863":"2018-02-05T19:42:00.758Z","1.0.0-next.1517864102118":"2018-02-05T20:55:18.543Z","1.0.0-next.1517870791213":"2018-02-05T22:46:48.515Z","1.0.0-next.1517871038246":"2018-02-05T22:50:52.578Z","1.0.0-next.1517871611925":"2018-02-05T23:00:24.304Z","1.0.0-next.1517871854711":"2018-02-05T23:04:26.856Z","1.0.0-next.1517875514795":"2018-02-06T00:05:26.722Z","1.0.0-next.1518024831019":"2018-02-07T17:34:04.717Z","1.0.0-next.1518042185396":"2018-02-07T22:23:20.557Z","1.0.0-next.1518044651367":"2018-02-07T23:04:26.110Z","1.0.0-next.1518069662486":"2018-02-08T06:01:14.321Z","1.0.0-next.1518069677340":"2018-02-08T06:01:30.320Z","1.0.0-next.1518148905595":"2018-02-09T04:01:57.185Z","1.0.0-next.1518485242743":"2018-02-13T01:27:33.951Z","1.0.0-next.1518548577113":"2018-02-13T19:03:13.632Z","1.0.0-next.1518550112236":"2018-02-13T19:28:45.721Z","1.0.0-next.1518558601182":"2018-02-13T21:50:16.482Z","1.0.0-next.1518559525177":"2018-02-13T22:05:41.186Z","1.0.0-next.1518561730306":"2018-02-13T22:42:26.306Z","1.0.0-next.1518570822451":"2018-02-14T01:13:54.153Z","1.0.0-next.1518653466440":"2018-02-15T00:11:23.669Z","1.0.0-next.1518655197185":"2018-02-15T00:40:11.411Z","1.0.0-next.1518659629421":"2018-02-15T01:54:03.303Z","1.0.0-next.1518730236759":"2018-02-15T21:30:47.138Z","1.1.0":"2018-02-16T17:18:20.238Z","1.1.0-next.1518809287189":"2018-02-16T19:28:21.051Z","1.1.0-next.1519262100584":"2018-02-22T01:15:13.823Z","1.1.0-next.1519266285104":"2018-02-22T02:25:00.858Z","1.1.0-next.1519345518390":"2018-02-23T00:25:29.004Z","1.1.0-next.1519350670048":"2018-02-23T01:51:20.464Z","1.1.0-next.1519355295259":"2018-02-23T03:08:27.882Z","1.1.0-next.1519355543971":"2018-02-23T03:12:35.639Z","1.1.0-next.1519424108630":"2018-02-23T22:15:20.121Z","1.1.0-next.1519430203926":"2018-02-23T23:56:56.851Z","1.1.0-next.1519449884398":"2018-02-24T05:24:55.663Z","1.1.1-next.1519451217463":"2018-02-24T05:47:08.102Z","1.1.1":"2018-02-24T06:09:06.794Z","1.1.1-next.1519455879191":"2018-02-24T07:04:52.209Z","1.1.1-next.1519675964105":"2018-02-26T20:12:55.651Z","1.1.1-next.1520401889860":"2018-03-07T05:51:41.947Z","1.1.1-next.1520401938885":"2018-03-07T05:52:30.338Z","1.1.1-next.1520415469395":"2018-03-07T09:38:02.098Z","1.1.1-next.1520879814994":"2018-03-12T18:37:06.377Z","1.1.1-next.1520894418677":"2018-03-12T22:40:30.118Z","1.1.1-next.1520952323905":"2018-03-13T14:45:37.009Z","1.1.1-next.1520952444105":"2018-03-13T14:47:40.478Z","1.1.1-next.1520953767679":"2018-03-13T15:09:46.882Z","1.1.1-next.1520958529908":"2018-03-13T16:29:05.869Z","1.1.1-next.1521058223243":"2018-03-14T20:10:39.236Z","1.1.1-next.1521075426851":"2018-03-15T00:57:19.477Z","1.1.1-next.1521139956274":"2018-03-15T18:52:53.940Z","1.1.1-next.1521148059100":"2018-03-15T21:07:55.213Z","1.1.1-next.1521151010194":"2018-03-15T21:57:04.862Z","1.1.1-next.1521163270821":"2018-03-16T01:21:25.385Z","1.2.0-next.1521166881791":"2018-03-16T02:21:36.176Z","1.2.0":"2018-03-16T02:22:34.466Z","1.2.0-next.1521223510564":"2018-03-16T18:05:29.389Z","1.2.0-next.1521239766470":"2018-03-16T22:36:25.967Z","1.2.0-next.1521514943168":"2018-03-20T03:02:36.239Z","1.2.0-next.1522268068681":"2018-03-28T20:14:44.800Z","1.2.0-next.1522268477499":"2018-03-28T20:21:29.876Z","1.2.0-next.1522280204510":"2018-03-28T23:36:56.866Z","1.2.0-next.1522345485546":"2018-03-29T17:44:59.473Z","1.2.0-next.1522345707169":"2018-03-29T17:48:39.687Z","1.2.0-next.1522346209003":"2018-03-29T17:57:02.455Z","1.2.0-next.1522357005652":"2018-03-29T20:56:57.462Z","1.2.0-next.1522358202204":"2018-03-29T21:16:54.820Z","1.2.0-next.1522369666407":"2018-03-30T00:27:57.411Z","1.2.0-next.1522432314513":"2018-03-30T17:52:08.098Z","1.2.0-next.1522438832236":"2018-03-30T19:40:46.274Z","1.2.0-next.1522776506144":"2018-04-03T17:28:37.908Z","1.2.0-next.1522793255797":"2018-04-03T22:07:47.036Z","1.2.0-next.1522794237544":"2018-04-03T22:24:10.693Z","1.2.0-next.1522875517748":"2018-04-04T20:58:52.816Z","1.2.0-next.1522875925576":"2018-04-04T21:05:37.861Z","1.2.0-next.1522876116282":"2018-04-04T21:08:48.600Z","1.2.0-next.1522959058052":"2018-04-05T20:11:10.777Z","1.2.0-next.1522996977258":"2018-04-06T06:43:15.955Z","1.2.0-next.1523056452461":"2018-04-06T23:14:26.746Z","1.2.0-next.1523057899376":"2018-04-06T23:38:32.964Z","1.2.0-next.1523064178622":"2018-04-07T01:23:09.812Z","1.2.0-next.1523088162996":"2018-04-07T08:02:57.104Z","1.2.0-next.1523149268591":"2018-04-08T01:01:22.101Z","1.2.0-next.1523149297195":"2018-04-08T01:01:50.124Z","1.2.0-next.1523149483176":"2018-04-08T01:04:59.938Z","1.2.0-next.1523309842933":"2018-04-09T21:37:37.040Z","1.2.0-next.1523310677066":"2018-04-09T21:51:29.650Z","1.2.0-next.1523314104076":"2018-04-09T22:48:36.575Z","1.2.0-next.1523317263232":"2018-04-09T23:41:17.368Z","1.2.0-next.1523336680826":"2018-04-10T05:04:58.321Z","1.2.0-next.1523338363805":"2018-04-10T05:32:56.530Z","1.2.0-next.1523342502622":"2018-04-10T06:41:57.850Z","1.2.0-next.1523388455344":"2018-04-10T19:27:47.841Z","1.2.0-next.1523394876742":"2018-04-10T21:14:48.313Z","1.2.0-next.1523401321974":"2018-04-10T23:02:14.567Z","1.2.0-next.1523408878908":"2018-04-11T01:08:15.893Z","1.2.0-next.1523416053090":"2018-04-11T03:07:46.134Z","1.2.0-next.1523417075075":"2018-04-11T03:24:47.344Z","1.2.0-next.1523485686787":"2018-04-11T22:28:19.040Z","1.2.0-next.1523546977615":"2018-04-12T15:29:52.823Z","1.3.0-next.1523592878900":"2018-04-13T04:14:53.599Z","1.3.0":"2018-04-13T04:15:11.938Z","1.3.0-next.1523642474853":"2018-04-13T18:01:27.710Z","1.3.0-next.1523643903145":"2018-04-13T18:25:14.742Z","1.3.0-next.1523903632662":"2018-04-16T18:34:07.174Z","1.3.0-next.1523922910902":"2018-04-16T23:55:22.563Z","1.3.0-next.1523986823398":"2018-04-17T17:40:40.805Z","1.3.0-next.1523988011170":"2018-04-17T18:00:22.636Z","1.3.0-next.1523991031219":"2018-04-17T18:50:44.515Z","1.3.0-next.1523998304267":"2018-04-17T20:52:03.392Z","1.3.0-next.1524002007381":"2018-04-17T21:54:42.035Z","1.3.0-next.1524077854221":"2018-04-18T18:57:45.934Z","1.3.0-next.1524169798128":"2018-04-19T20:30:10.265Z","1.3.0-next.1524172726027":"2018-04-19T21:18:59.573Z","1.3.0-next.1524503013067":"2018-04-23T17:03:46.207Z","1.3.0-next.1524642447975":"2018-04-25T07:47:41.977Z","1.3.0-next.1524695478733":"2018-04-25T22:31:30.830Z","1.3.0-next.1524701668798":"2018-04-26T00:14:42.550Z","1.3.0-next.1524704985101":"2018-04-26T01:09:57.273Z","1.3.0-next.1524705708145":"2018-04-26T01:22:00.578Z","1.3.0-next.1524712919551":"2018-04-26T03:22:12.349Z","1.3.0-next.1524713000921":"2018-04-26T03:23:33.035Z","1.3.0-next.1524757175953":"2018-04-26T15:39:56.140Z","1.3.0-next.1524766628711":"2018-04-26T18:17:20.626Z","1.3.0-next.1524774887046":"2018-04-26T20:35:00.453Z","1.3.0-next.1524774920630":"2018-04-26T20:35:34.916Z","1.3.0-next.1524865639981":"2018-04-27T21:47:33.168Z","1.3.0-next.1524884685958":"2018-04-28T03:04:57.363Z","1.3.0-next.1524889059564":"2018-04-28T04:17:50.557Z","1.3.0-next.1524890531204":"2018-04-28T04:42:24.054Z","1.3.0-next.1525111445523":"2018-04-30T18:04:20.623Z","1.3.0-next.1525135284208":"2018-05-01T00:41:36.034Z","1.3.0-next.1525301631811":"2018-05-02T22:54:04.443Z","1.3.0-next.1525388744646":"2018-05-03T23:05:56.508Z","1.3.0-next.1525459650281":"2018-05-04T18:47:43.584Z","1.3.0-next.1525828826075":"2018-05-09T01:20:39.797Z","1.4.0-next.1525841345569":"2018-05-09T04:49:17.410Z","1.4.0":"2018-05-09T05:14:40.052Z","1.4.0-next.1525875866798":"2018-05-09T14:24:39.560Z","1.4.0-next.1525886024469":"2018-05-09T17:13:56.138Z","1.4.0-next.1525984104919":"2018-05-10T20:28:36.638Z","1.4.0-next.1526506763480":"2018-05-16T21:39:35.589Z","1.4.0-next.1526506897747":"2018-05-16T21:41:52.288Z","1.4.0-next.1526507871161":"2018-05-16T21:58:04.691Z","1.4.0-next.1526510342960":"2018-05-16T22:39:14.771Z","1.4.0-next.1526519544088":"2018-05-17T01:12:35.794Z","1.4.0-next.1526593919447":"2018-05-17T21:52:48.200Z","1.4.0-next.1526933481310":"2018-05-21T20:11:34.151Z","1.4.0-next.1526938425001":"2018-05-21T21:34:01.635Z","1.4.0-next.1526938802806":"2018-05-21T21:40:16.549Z","1.4.0-next.1527292051776":"2018-05-25T23:47:48.963Z","1.4.0-next.1527292060831":"2018-05-25T23:47:57.521Z","1.4.0-next.1527292169142":"2018-05-25T23:49:41.733Z","1.4.0-next.1527292577308":"2018-05-25T23:56:29.717Z","1.4.0-next.1527292742969":"2018-05-25T23:59:17.836Z","1.4.0-next.1527294524156":"2018-05-26T00:28:55.860Z","1.4.0-next.1527294631387":"2018-05-26T00:30:43.522Z","1.4.0-next.1527294674237":"2018-05-26T00:31:26.330Z","1.4.0-next.1527632813414":"2018-05-29T22:27:06.605Z","1.4.0-next.1527632860155":"2018-05-29T22:27:54.701Z","1.4.0-next.1527633150048":"2018-05-29T22:32:41.825Z","1.4.0-next.1527634039615":"2018-05-29T22:47:30.071Z","1.4.0-next.1527715229660":"2018-05-30T21:20:45.592Z","1.4.0-next.1527729038649":"2018-05-31T01:10:50.963Z","1.4.0-next.1527793846806":"2018-05-31T19:11:00.923Z","1.4.0-next.1527801882058":"2018-05-31T21:24:55.054Z","1.4.0-next.1527808033454":"2018-05-31T23:07:28.480Z","1.4.0-next.1527810120829":"2018-05-31T23:42:13.442Z","1.4.0-next.1527810915859":"2018-05-31T23:55:28.912Z","1.4.0-next.1527810967055":"2018-05-31T23:56:21.038Z","1.4.0-next.1527811743681":"2018-06-01T00:09:21.259Z","1.4.0-next.1527813649005":"2018-06-01T00:41:01.420Z","1.4.0-next.1527816016516":"2018-06-01T01:20:29.708Z","1.4.0-next.1527877736615":"2018-06-01T18:29:09.842Z","1.4.0-next.1527886329222":"2018-06-01T20:52:27.283Z","1.4.0-next.1527886799309":"2018-06-01T21:00:12.611Z","1.4.0-next.1527887011493":"2018-06-01T21:03:47.564Z","1.4.0-next.1527891453248":"2018-06-01T22:17:46.109Z","1.4.0-next.1527891760955":"2018-06-01T22:22:52.531Z","1.4.0-next.1527958760421":"2018-06-02T16:59:34.058Z","1.4.0-next.1527965268824":"2018-06-02T18:48:07.804Z","1.4.0-next.1528296840819":"2018-06-06T14:54:13.757Z","1.4.0-next.1528334015125":"2018-06-07T01:13:48.501Z","1.4.0-next.1528334094813":"2018-06-07T01:15:08.178Z","1.4.0-next.1528334327491":"2018-06-07T01:19:02.176Z","1.4.0-next.1528389663924":"2018-06-07T16:41:17.318Z","1.4.0-next.1528395894335":"2018-06-07T18:25:07.626Z","1.5.0-next.1528399382159":"2018-06-07T19:23:26.538Z","1.5.0":"2018-06-07T19:26:30.034Z","1.5.0-next.1528402191643":"2018-06-07T20:10:03.498Z","1.5.0-next.1528919394878":"2018-06-13T19:50:07.401Z","1.5.0-next.1528948338383":"2018-06-14T03:52:36.036Z","1.5.0-next.1528996935297":"2018-06-14T17:22:29.674Z","1.5.0-next.1528997168247":"2018-06-14T17:26:24.847Z","1.5.0-next.1528997315916":"2018-06-14T17:28:47.424Z","1.5.0-next.1528997827655":"2018-06-14T17:37:22.792Z","1.5.0-next.1529001772241":"2018-06-14T18:43:08.299Z","1.5.0-next.1529009865250":"2018-06-14T20:57:59.729Z","1.5.0-next.1529010081851":"2018-06-14T21:01:32.555Z","1.5.0-next.1529012067283":"2018-06-14T21:34:41.529Z","1.5.0-next.1529015425897":"2018-06-14T22:30:38.448Z","1.5.0-next.1529017025751":"2018-06-14T22:57:17.731Z","1.5.0-next.1529019939040":"2018-06-14T23:45:50.600Z","1.5.0-next.1529020277784":"2018-06-14T23:51:32.068Z","1.5.0-next.1529354619280":"2018-06-18T20:43:53.744Z","1.5.0-next.1529393801062":"2018-06-19T07:36:55.878Z","1.5.0-next.1529429863153":"2018-06-19T17:37:54.629Z","1.5.0-next.1529430695195":"2018-06-19T17:51:45.900Z","1.5.0-next.1529438841250":"2018-06-19T20:07:37.258Z","1.5.0-next.1529441303045":"2018-06-19T20:48:35.211Z","1.5.0-next.1529528205725":"2018-06-20T20:57:12.084Z","1.5.0-next.1529601789907":"2018-06-21T17:23:21.750Z","1.5.0-next.1529602796106":"2018-06-21T17:40:09.737Z","1.5.0-next.1529964776684":"2018-06-25T22:13:07.585Z","1.5.0-next.1530045933494":"2018-06-26T20:45:46.522Z","1.5.0-next.1530061507172":"2018-06-27T01:05:19.187Z","1.5.0-next.1530061501767":"2018-06-27T01:05:21.162Z","1.5.0-next.1530217505079":"2018-06-28T20:25:16.368Z","1.5.0-next.1530237072145":"2018-06-29T01:51:25.830Z","1.5.0-next.1530291793909":"2018-06-29T17:03:26.943Z","1.5.0-next.1530299145196":"2018-06-29T19:05:57.546Z","1.5.0-next.1530333501924":"2018-06-30T04:38:33.558Z","1.5.0-next.1530747584201":"2018-07-04T23:39:55.520Z","1.5.0-next.1530747678469":"2018-07-04T23:41:29.375Z","1.5.0-next.1530749057441":"2018-07-05T00:04:28.860Z","1.5.0-next.1530771453419":"2018-07-05T06:17:43.938Z","1.5.0-next.1531162744899":"2018-07-09T18:59:17.548Z","1.5.0-next.1531189632656":"2018-07-10T02:27:31.950Z"},"tags":{"latest":"1.5.0","next":"1.5.0-next.1531189632656"},"description":"A high-level API to control headless Chrome over the DevTools Protocol","dependencies":{"debug":"^3.1.0","extract-zip":"^1.6.6","https-proxy-agent":"^2.2.1","mime":"^2.0.3","progress":"^2.0.0","proxy-from-env":"^1.0.0","rimraf":"^2.6.1","ws":"^5.1.1"},"devDependencies":{"@types/debug":"0.0.30","@types/extract-zip":"^1.6.2","@types/mime":"^2.0.0","@types/node":"^8.0.26","@types/rimraf":"^2.0.2","@types/ws":"^3.0.2","commonmark":"^0.27.0","cross-env":"^5.0.5","eslint":"^4.19.1","esprima":"^4.0.0","minimist":"^1.2.0","ncp":"^2.0.0","pdfjs-dist":"^1.8.595","pixelmatch":"^4.0.2","pngjs":"^3.3.3","text-diff":"^1.0.1","typescript":"~2.8.1"},"repository":{"url":"https://github.com/GoogleChrome/puppeteer","project":"puppeteer","user":"GoogleChrome","host":"github.com","path":"","head":"194d58002678735660187586e86c38e97ad68278","branch":"194d58002678735660187586e86c38e97ad68278"},"githubRepo":{"user":"GoogleChrome","project":"puppeteer","path":"","head":"194d58002678735660187586e86c38e97ad68278"},"gitHead":"194d58002678735660187586e86c38e97ad68278","readme":"","owner":{"name":"GoogleChrome","avatar":"https://github.com/GoogleChrome.png","link":"https://github.com/GoogleChrome"},"deprecated":false,"homepage":null,"license":"Apache-2.0","keywords":[],"computedKeywords":[],"computedMetadata":{},"created":1364003087039,"modified":1531189651950,"lastPublisher":{"name":"ebidel","email":"ebidel@gmail.com","avatar":"https://gravatar.com/avatar/e7948aac7c52b26470be80311873a398","link":"https://www.npmjs.com/~ebidel"},"owners":[{"name":"aslushnikov","email":"aslushnikov@gmail.com","avatar":"https://gravatar.com/avatar/a2c5804b5abd253781b889090c2a47f0","link":"https://www.npmjs.com/~aslushnikov"},{"name":"ebidel","email":"ebidel@gmail.com","avatar":"https://gravatar.com/avatar/e7948aac7c52b26470be80311873a398","link":"https://www.npmjs.com/~ebidel"},{"name":"paulirish","email":"paul.irish@gmail.com","avatar":"https://gravatar.com/avatar/ffe68d6f71b225f7661d33f2a8908281","link":"https://www.npmjs.com/~paulirish"}],"lastCrawl":"2018-07-10T02:27:41.143Z","_searchInternal":{"concatenatedName":"puppeteer","alternativeNames":["puppeteer","puppeteer","puppeteer"],"popularName":"puppeteer","downloadsMagnitude":7},"dependents":0,"humanDependents":"0","changelogFilename":null,"objectID":"puppeteer","_highlightResult":{"name":{"value":"<em>puppeteer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["puppeteer"]},"description":{"value":"A high-level API to control headless Chrome over the DevTools Protocol","matchLevel":"none","matchedWords":[]},"owner":{"name":{"value":"GoogleChrome","matchLevel":"none","matchedWords":[]}},"owners":[{"name":{"value":"aslushnikov","matchLevel":"none","matchedWords":[]}},{"name":{"value":"ebidel","matchLevel":"none","matchedWords":[]}},{"name":{"value":"paulirish","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>puppeteer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["puppeteer"]},{"value":"<em>puppeteer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["puppeteer"]},{"value":"<em>puppeteer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["puppeteer"]}],"popularName":{"value":"<em>puppeteer</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["puppeteer"]}}},"types":"// Type definitions for puppeteer 1.5\n// Project: https://github.com/GoogleChrome/puppeteer#readme\n// Definitions by: Marvin Hagemeister <https://github.com/marvinhagemeister>\n//                 Christopher Deutsch <https://github.com/cdeutsch>\n//                 Konstantin Simon Maria MÃ¶llers <https://github.com/ksm2>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n/// <reference types=\"node\" />\n\nimport { EventEmitter } from \"events\";\nimport { ChildProcess } from \"child_process\";\n\n/** Wraps a DOM element into an ElementHandle instance */\nexport type WrapElementHandle<X> = X extends Element ? ElementHandle<X> : X;\n\n/** Unwraps a DOM element out of an ElementHandle instance */\nexport type UnwrapElementHandle<X> = X extends ElementHandle<infer E> ? E : X;\n\n/** Defines `$eval` and `$$eval` for Page, Frame and ElementHandle. */\nexport interface Evalable {\n  /**\n   * This method runs `document.querySelector` within the context and passes it as the first argument to `pageFunction`.\n   * If there's no element matching `selector`, the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $eval<R>(\n    selector: string,\n    pageFunction: (element: Element) => R | Promise<R>,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `document.querySelector` within the context and passes it as the first argument to `pageFunction`.\n   * If there's no element matching `selector`, the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $eval<R, X1>(\n    selector: string,\n    pageFunction: (element: Element, x1: UnwrapElementHandle<X1>) => R | Promise<R>,\n    x1: X1,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `document.querySelector` within the context and passes it as the first argument to `pageFunction`.\n   * If there's no element matching `selector`, the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @param x2 Second argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $eval<R, X1, X2>(\n    selector: string,\n    pageFunction: (element: Element, x1: UnwrapElementHandle<X1>, x2: UnwrapElementHandle<X2>) => R | Promise<R>,\n    x1: X1,\n    x2: X2,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `document.querySelector` within the context and passes it as the first argument to `pageFunction`.\n   * If there's no element matching `selector`, the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @param x2 Second argument to pass to pageFunction\n   * @param x3 Third argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $eval<R, X1, X2, X3>(\n    selector: string,\n    pageFunction: (element: Element, x1: UnwrapElementHandle<X1>, x2: UnwrapElementHandle<X2>, x3: UnwrapElementHandle<X3>) => R | Promise<R>,\n    x1: X1,\n    x2: X2,\n    x3: X3,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `document.querySelector` within the context and passes it as the first argument to `pageFunction`.\n   * If there's no element matching `selector`, the method throws an error.\n   *\n   * If `pageFunction` returns a Promise, then `$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param args Arguments to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $eval<R>(\n    selector: string,\n    pageFunction: (element: Element, ...args: any[]) => R | Promise<R>,\n    ...args: any[],\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within the context and passes it as the\n   * first argument to `pageFunction`.\n   *\n   * If `pageFunction` returns a Promise, then `$$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $$eval<R>(\n    selector: string,\n    pageFunction: (elements: Element[]) => R | Promise<R>,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within the context and passes it as the\n   * first argument to `pageFunction`.\n   *\n   * If `pageFunction` returns a Promise, then `$$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $$eval<R, X1>(\n    selector: string,\n    pageFunction: (elements: Element[], x1: UnwrapElementHandle<X1>) => R | Promise<R>,\n    x1: X1,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within the context and passes it as the\n   * first argument to `pageFunction`.\n   *\n   * If `pageFunction` returns a Promise, then `$$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @param x2 Second argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $$eval<R, X1, X2>(\n    selector: string,\n    pageFunction: (elements: Element[], x1: UnwrapElementHandle<X1>, x2: UnwrapElementHandle<X2>) => R | Promise<R>,\n    x1: X1,\n    x2: X2,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within the context and passes it as the\n   * first argument to `pageFunction`.\n   *\n   * If `pageFunction` returns a Promise, then `$$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param x1 First argument to pass to pageFunction\n   * @param x2 Second argument to pass to pageFunction\n   * @param x3 Third argument to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $$eval<R, X1, X2, X3>(\n    selector: string,\n    pageFunction: (elements: Element[], x1: UnwrapElementHandle<X1>, x2: UnwrapElementHandle<X2>, x3: UnwrapElementHandle<X3>) => R | Promise<R>,\n    x1: X1,\n    x2: X2,\n    x3: X3,\n  ): Promise<WrapElementHandle<R>>;\n\n  /**\n   * This method runs `Array.from(document.querySelectorAll(selector))` within the context and passes it as the\n   * first argument to `pageFunction`.\n   *\n   * If `pageFunction` returns a Promise, then `$$eval` would wait for the promise to resolve and return its value.\n   *\n   * @param selector A selector to query for\n   * @param pageFunction Function to be evaluated in browser context\n   * @param args Arguments to pass to pageFunction\n   * @returns Promise which resolves to the return value of pageFunction\n   */\n  $$eval<R>(\n    selector: string,\n    pageFunction: (elements: Element[], ...args: any[]) => R | Promise<R>,\n    ...args: any[]\n  ): Promise<WrapElementHandle<R>>;\n}\n\n/** Keyboard provides an api for managing a virtual keyboard. */\nexport interface Keyboard {\n  /**\n   * Dispatches a keydown event.\n   * @param key Name of key to press, such as ArrowLeft.\n   * @param options Specifies a input text event.\n   */\n  down(key: string, options?: { text?: string }): Promise<void>;\n\n  /** Shortcut for `keyboard.down` and `keyboard.up`. */\n  press(key: string, options?: { text?: string, delay?: number }): Promise<void>;\n\n  /** Dispatches a `keypress` and `input` event. This does not send a `keydown` or keyup `event`. */\n  sendCharacter(char: string): Promise<void>;\n\n  /**\n   * Sends a keydown, keypress/input, and keyup event for each character in the text.\n   * @param text A text to type into a focused element.\n   * @param options Specifies the typing options.\n   */\n  type(text: string, options?: { delay?: number }): Promise<void>;\n\n  /**\n   * Dispatches a keyup event.\n   * @param key Name of key to release, such as ArrowLeft.\n   */\n  up(key: string): Promise<void>;\n}\n\nexport interface MousePressOptions {\n  /**\n   * left, right, or middle.\n   * @default left\n   */\n  button?: MouseButtons;\n  /**\n   * The number of clicks.\n   * @default 1\n   */\n  clickCount?: number;\n}\n\nexport interface Mouse {\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x The x position.\n   * @param y The y position.\n   * @param options The click options.\n   */\n  click(x: number, y: number, options?: ClickOptions): Promise<void>;\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options The mouse press options.\n   */\n  down(options?: MousePressOptions): Promise<void>;\n\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x The x position.\n   * @param y The y position.\n   * @param options The mouse move options.\n   */\n  move(x: number, y: number, options?: { steps: number }): Promise<void>;\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options The mouse press options.\n   */\n  up(options?: MousePressOptions): Promise<void>;\n}\n\nexport interface Touchscreen {\n  /**\n   * Dispatches a touchstart and touchend event.\n   * @param x The x position.\n   * @param y The y position.\n   */\n  tap(x: number, y: number): Promise<void>;\n}\n/**\n * You can use `tracing.start` and `tracing.stop` to create a trace file which can be opened in Chrome DevTools or timeline viewer.\n */\nexport interface Tracing {\n  start(options: TracingStartOptions): Promise<void>;\n  stop(): Promise<Buffer>;\n}\n\nexport interface TracingStartOptions {\n  path: string;\n  screenshots?: boolean;\n  categories?: string[];\n}\n\n/** Dialog objects are dispatched by page via the 'dialog' event. */\nexport interface Dialog {\n  /**\n   * Accepts the dialog.\n   * @param promptText A text to enter in prompt. Does not cause any effects if the dialog's type is not prompt.\n   */\n  accept(promptText?: string): Promise<void>;\n\n  /** If dialog is prompt, returns default prompt value. Otherwise, returns empty string. */\n  defaultValue(): string;\n\n  /** Dismiss the dialog */\n  dismiss(): Promise<void>;\n\n  /** Returns the message displayed in the dialog. */\n  message(): string;\n\n  /** The dialog type. Dialog's type, can be one of `alert`, `beforeunload`, `confirm` or `prompt`. */\n  type(): \"alert\" | \"beforeunload\" | \"confirm\" | \"prompt\";\n}\n\n/** ConsoleMessage objects are dispatched by page via the 'console' event. */\nexport interface ConsoleMessage {\n  /** The message arguments. */\n  args(): JSHandle[];\n  /** The message text. */\n  text(): string;\n  type(): 'log' | 'debug' | 'info' | 'error' | 'warning' | 'dir' | 'dirxml' | 'table' |\n  'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' |\n  'profile' | 'profileEnd' | 'count' | 'timeEnd';\n}\n\nexport type PageEvents =\n  | \"close\"\n  | \"console\"\n  | \"dialog\"\n  | \"error\"\n  | \"frameattached\"\n  | \"framedetached\"\n  | \"framenavigated\"\n  | \"load\"\n  | \"pageerror\"\n  | \"request\"\n  | \"requestfailed\"\n  | \"requestfinished\"\n  | \"response\"\n  | \"workercreated\"\n  | \"workerdestroyed\";\n\nexport type BrowserEvents =\n  | \"disconnected\"\n  | \"targetchanged\"\n  | \"targetcreated\"\n  | \"targetdestroyed\";\n\nexport interface AuthOptions {\n  username: string;\n  password: string;\n}\n\nexport type MouseButtons = \"left\" | \"right\" | \"middle\";\n\nexport interface ClickOptions {\n  /** defaults to left */\n  button?: MouseButtons;\n  /** defaults to 1 */\n  clickCount?: number;\n  /**\n   * Time to wait between mousedown and mouseup in milliseconds.\n   * Defaults to 0.\n   */\n  delay?: number;\n}\n\n/** Represents a browser cookie. */\nexport interface Cookie {\n  /** The cookie name. */\n  name: string;\n  /** The cookie value. */\n  value: string;\n  /** The cookie domain. */\n  domain: string;\n  /** The cookie path. */\n  path: string;\n  /** The cookie Unix expiration time in seconds. */\n  expires: number;\n  /** The cookie http only flag. */\n  httpOnly: boolean;\n  /** The session cookie flag. */\n  session: boolean;\n  /** The cookie secure flag. */\n  secure: boolean;\n  /** The cookie same site definition. */\n  sameSite: \"Strict\" | \"Lax\";\n}\n\nexport interface DeleteCookie {\n  /** The cookie name. */\n  name: string;\n  url?: string;\n  domain?: string;\n  path?: string;\n  secure?: boolean;\n}\n\nexport interface SetCookie {\n  /** The cookie name. */\n  name: string;\n  /** The cookie value. */\n  value: string;\n  /** The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie. */\n  url?: string;\n  /** The cookie domain. */\n  domain?: string;\n  /** The cookie path. */\n  path?: string;\n  /** The cookie Unix expiration time in seconds. */\n  expires?: number;\n  /** The cookie http only flag. */\n  httpOnly?: boolean;\n  /** The session cookie flag. */\n  session?: boolean;\n  /** The cookie secure flag. */\n  secure?: boolean;\n  /** The cookie same site definition. */\n  sameSite?: \"Strict\" | \"Lax\";\n}\n\nexport interface Viewport {\n  /** The page width in pixels. */\n  width: number;\n  /** The page height in pixels. */\n  height: number;\n  /**\n   * Specify device scale factor (can be thought of as dpr).\n   * @default 1\n   */\n  deviceScaleFactor?: number;\n  /**\n   * Whether the `meta viewport` tag is taken into account.\n   * @default false\n   */\n  isMobile?: boolean;\n  /**\n   * Specifies if viewport supports touch events.\n   * @default false\n   */\n  hasTouch?: boolean;\n  /**\n   * Specifies if viewport is in landscape mode.\n   * @default false\n   */\n  isLandscape?: boolean;\n}\n\n/** Page emulation options. */\nexport interface EmulateOptions {\n  /** The viewport emulation options. */\n  viewport?: Viewport;\n  /** The emulated user-agent. */\n  userAgent?: string;\n}\n\nexport type EvaluateFn = string | ((...args: any[]) => any);\n\nexport type LoadEvent =\n  | \"load\"\n  | \"domcontentloaded\"\n  | \"networkidle0\"\n  | \"networkidle2\";\n\n/** The navigation options. */\nexport interface NavigationOptions {\n  /**\n   * Maximum navigation time in milliseconds, pass 0 to disable timeout.\n   * @default 30000\n   */\n  timeout?: number;\n  /**\n   * When to consider navigation succeeded.\n   * @default load Navigation is consider when the `load` event is fired.\n   */\n  waitUntil?: LoadEvent | LoadEvent[];\n}\n\nexport type PDFFormat =\n  | \"Letter\"\n  | \"Legal\"\n  | \"Tabload\"\n  | \"Ledger\"\n  | \"A0\"\n  | \"A1\"\n  | \"A2\"\n  | \"A3\"\n  | \"A4\"\n  | \"A5\";\n\nexport interface PDFOptions {\n  /**\n   * The file path to save the PDF to.\n   * If `path` is a relative path, then it is resolved relative to current working directory.\n   * If no path is provided, the PDF won't be saved to the disk.\n   */\n  path?: string;\n  /**\n   * Scale of the webpage rendering.\n   * @default 1\n   */\n  scale?: number;\n  /**\n   * Display header and footer.\n   * @default false\n   */\n  displayHeaderFooter?: boolean;\n  /**\n   * HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:\n   * - `date` formatted print date\n   * - `title` document title\n   * - `url` document location\n   * - `pageNumber` current page number\n   * - `totalPages` total pages in the document\n   */\n  headerTemplate?: string;\n  /**\n   * HTML template for the print footer. Should be valid HTML markup with following classes used to inject printing values into them:\n   * - `date` formatted print date\n   * - `title` document title\n   * - `url` document location\n   * - `pageNumber` current page number\n   * - `totalPages` total pages in the document\n   */\n  footerTemplate?: string;\n  /**\n   * Print background graphics.\n   * @default false\n   */\n  printBackground?: boolean;\n  /**\n   * Paper orientation.\n   * @default false\n   */\n  landscape?: boolean;\n  /**\n   * Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty\n   * string, which means print all pages.\n   */\n  pageRanges?: string;\n  /** Paper format. If set, takes priority over width or height options. Defaults to 'Letter'. */\n  format?: PDFFormat;\n  /** Paper width, accepts values labeled with units. */\n  width?: string;\n  /** Paper height, accepts values labeled with units. */\n  height?: string;\n  /** Paper margins, defaults to none.  */\n  margin?: {\n    /** Top margin, accepts values labeled with units. */\n    top?: string;\n    /** Right margin, accepts values labeled with units. */\n    right?: string;\n    /** Bottom margin, accepts values labeled with units. */\n    bottom?: string;\n    /** Left margin, accepts values labeled with units. */\n    left?: string;\n  };\n}\n\n/** Defines the screenshot options. */\nexport interface ScreenshotOptions {\n  /**\n   * The file path to save the image to. The screenshot type will be inferred from file extension.\n   * If `path` is a relative path, then it is resolved relative to current working directory.\n   * If no path is provided, the image won't be saved to the disk.\n   */\n  path?: string;\n  /**\n   * The screenshot type.\n   * @default png\n   */\n  type?: \"jpeg\" | \"png\";\n  /** The quality of the image, between 0-100. Not applicable to png images. */\n  quality?: number;\n  /**\n   * When true, takes a screenshot of the full scrollable page.\n   * @default false\n   */\n  fullPage?: boolean;\n  /**\n   * An object which specifies clipping region of the page.\n   */\n  clip?: BoundingBox;\n  /**\n   * Hides default white background and allows capturing screenshots with transparency.\n   * @default false\n   */\n  omitBackground?: boolean;\n}\n\n/** Options for `addStyleTag` */\nexport interface StyleTagOptions {\n  /** Url of the <link> tag. */\n  url?: string;\n  /** Path to the CSS file to be injected into frame. If `path` is a relative path, then it is resolved relative to current working directory. */\n  path?: string;\n  /** Raw CSS content to be injected into frame. */\n  content?: string;\n}\n/** Options for `addScriptTag` */\nexport interface ScriptTagOptions {\n  /** Url of a script to be added. */\n  url?: string;\n  /** Path to the JavaScript file to be injected into frame. If `path` is a relative path, then it is resolved relative to current working directory. */\n  path?: string;\n  /** Raw JavaScript content to be injected into frame. */\n  content?: string;\n  /** Script type. Use 'module' in order to load a Javascript ES6 module. */\n  type?: string;\n}\n\nexport interface PageFnOptions {\n  polling?: \"raf\" | \"mutation\" | number;\n  timeout?: number;\n}\n\nexport interface BoundingBox {\n  /** The x-coordinate of top-left corner. */\n  x: number;\n  /** The y-coordinate of top-left corner. */\n  y: number;\n  /** The width. */\n  width: number;\n  /** The height. */\n  height: number;\n}\n\nexport interface BoxModel {\n  /** Content box, represented as an array of {x, y} points. */\n  content: Box[];\n  /** Padding box, represented as an array of {x, y} points. */\n  padding: Box[];\n  /** Border box, represented as an array of {x, y} points. */\n  border: Box[];\n  /** Margin box, represented as an array of {x, y} points. */\n  margin: Box[];\n  width: number;\n  height: number;\n}\n\nexport interface Box {\n  x: number;\n  y: number;\n}\n\n/**\n * The Worker class represents a WebWorker.\n * The events workercreated and workerdestroyed are emitted on the page object to signal the worker lifecycle.\n */\nexport interface Worker {\n  /**\n   * If the function passed to the `worker.evaluate` returns a Promise,\n   * then `worker.evaluate` would wait for the promise to resolve and return its value.\n   *\n   * If the function passed to the `worker.evaluate` returns a non-Serializable value,\n   * then `worker.evaluate` resolves to `undefined`.\n   */\n  evaluate<T>(\n    pageFunction: (...args: any[]) => T | Promise<T>,\n    ...args: any[],\n  ): Promise<T>;\n\n  /**\n   * The only difference between `worker.evaluate` and `worker.evaluateHandle` is\n   * that `worker.evaluateHandle` returns in-page object (JSHandle).\n   */\n  evaluateHandle<T>(\n    pageFunction: (...args: any[]) => T | Promise<T>,\n    ...args: any[],\n  ): Promise<T>;\n\n  executionContext(): Promise<ExecutionContext>;\n\n  url(): string;\n}\n\n/**\n * Represents an in-page DOM element. ElementHandles can be created with the page.$ method.\n */\nexport interface ElementHandle<E extends Element = Element> extends JSHandle, Evalable {\n  /**\n   * The method runs element.querySelector within the page.\n   * If no element matches the selector, the return value resolve to null.\n   * @param selector A selector to query element for\n   * @since 0.13.0\n   */\n  $(selector: string): Promise<ElementHandle | null>;\n\n  /**\n   * The method runs element.querySelectorAll within the page.\n   * If no elements match the selector, the return value resolve to [].\n   * @param selector A selector to query element for\n   * @since 0.13.0\n   */\n  $$(selector: string): Promise<ElementHandle[]>;\n\n  /**\n   * @param selector XPath expression to evaluate.\n   */\n  $x(expression: string): Promise<ElementHandle[]>;\n  /**\n   * This method returns the value resolve to the bounding box of the element (relative to the main frame), or null if the element is not visible.\n   */\n  boundingBox(): Promise<BoundingBox | null>;\n  /**\n   * This method returns boxes of the element, or null if the element is not visible.\n   * Boxes are represented as an array of points; each Point is an object {x, y}. Box points are sorted clock-wise.\n   */\n  boxModel(): Promise<BoxModel | null>;\n  /**\n   * This method scrolls element into view if needed, and then uses page.mouse to click in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   * @param options Specifies the options.\n   * @since 0.9.0\n   */\n  click(options?: ClickOptions): Promise<void>;\n  /**\n   * @returns Resolves to the content frame for element handles referencing iframe nodes, or null otherwise.\n   * @since 1.2.0\n   */\n  contentFrame(): Promise<Frame | null>;\n  /**\n   * Calls focus on the element.\n   */\n  focus(): Promise<void>;\n  /**\n   * This method scrolls element into view if needed, and then uses page.mouse to hover over the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  hover(): Promise<void>;\n  /**\n   * Focuses the element, and then uses keyboard.down and keyboard.up.\n   * @param key Name of key to press, such as ArrowLeft. See USKeyboardLayout for a list of all key names.\n   * @param options The text and delay options.\n   */\n  press(key: string, options?: { text?: string, delay?: number }): Promise<void>;\n  /**\n   * This method scrolls element into view if needed, and then uses page.screenshot to take a screenshot of the element.\n   * If the element is detached from DOM, the method throws an error.\n   * @param options Same options as in page.screenshot.\n   */\n  screenshot(options?: ScreenshotOptions): Promise<Buffer>;\n  /**\n   * This method scrolls element into view if needed, and then uses touchscreen.tap to tap in the center of the element.\n   * If the element is detached from DOM, the method throws an error.\n   */\n  tap(): Promise<void>;\n  toString(): string;\n  /**\n   * Focuses the element, and then sends a keydown, keypress/input, and keyup event for each character in the text.\n   * @param text A text to type into a focused element.\n   * @param options The typing options.\n   */\n  type(text: string, options?: { delay: number }): Promise<void>;\n  /**\n   * This method expects elementHandle to point to an input element.\n   * @param filePaths Sets the value of the file input these paths. If some of the filePaths are relative paths, then they are resolved relative to current working directory.\n   */\n  uploadFile(...filePaths: string[]): Promise<void>;\n}\n\n/** The class represents a context for JavaScript execution. */\nexport interface ExecutionContext {\n  evaluate(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<any>;\n  evaluateHandle(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<JSHandle>;\n  queryObjects(prototypeHandle: JSHandle): JSHandle;\n}\n\n/** JSHandle represents an in-page JavaScript object. */\nexport interface JSHandle {\n  /**\n   * Returns a ElementHandle\n   */\n  asElement(): ElementHandle | null;\n  /**\n   * Stops referencing the element handle.\n   */\n  dispose(): Promise<void>;\n  /**\n   * Gets the execution context.\n   */\n  executionContext(): ExecutionContext;\n  /**\n   * Returns a map with property names as keys and JSHandle instances for the property values.\n   */\n  getProperties(): Promise<Map<string, JSHandle>>;\n  /**\n   * Fetches a single property from the objectHandle.\n   * @param propertyName The property to get.\n   */\n  getProperty(propertyName: string): Promise<JSHandle>;\n\n  /**\n   * Returns a JSON representation of the object.\n   * The JSON is generated by running JSON.stringify on the object in page and consequent JSON.parse in puppeteer.\n   * @throws The method will throw if the referenced object is not stringifiable.\n   */\n  jsonValue(): Promise<any>;\n}\n\nexport interface Metrics {\n  /** The timestamp when the metrics sample was taken. */\n  Timestamp: number;\n  /** Number of documents in the page. */\n  Documents: number;\n  /** Number of frames in the page. */\n  Frames: number;\n  /** Number of events in the page. */\n  JSEventListeners: number;\n  /** Number of DOM nodes in the page. */\n  Nodes: number;\n  /** Total number of full or partial page layout. */\n  LayoutCount: number;\n  /** Total number of page style recalculations. */\n  RecalcStyleCount: number;\n  /** Combined durations of all page layouts. */\n  LayoutDuration: number;\n  /** Combined duration of all page style recalculations. */\n  RecalcStyleDuration: number;\n  /** Combined duration of JavaScript execution. */\n  ScriptDuration: number;\n  /** Combined duration of all tasks performed by the browser. */\n  TaskDuration: number;\n  /** Used JavaScript heap size. */\n  JSHeapUsedSize: number;\n  /** Total JavaScript heap size. */\n  JSHeapTotalSize: number;\n}\n\nexport type Headers = Record<string, string>;\nexport type HttpMethod =\n  | \"GET\"\n  | \"POST\"\n  | \"PATCH\"\n  | \"PUT\"\n  | \"DELETE\"\n  | \"OPTIONS\";\n\nexport type ResourceType =\n  | \"document\"\n  | \"stylesheet\"\n  | \"image\"\n  | \"media\"\n  | \"font\"\n  | \"script\"\n  | \"texttrack\"\n  | \"xhr\"\n  | \"fetch\"\n  | \"eventsource\"\n  | \"websocket\"\n  | \"manifest\"\n  | \"other\";\n\nexport type ErrorCode =\n  | \"aborted\"\n  | \"accessdenied\"\n  | \"addressunreachable\"\n  | \"connectionaborted\"\n  | \"connectionclosed\"\n  | \"connectionfailed\"\n  | \"connectionrefused\"\n  | \"connectionreset\"\n  | \"internetdisconnected\"\n  | \"namenotresolved\"\n  | \"timedout\"\n  | \"failed\";\n\nexport interface Overrides {\n  url?: string;\n  method?: HttpMethod;\n  postData?: string;\n  headers?: Headers;\n}\n\n/** Represents a page request. */\nexport interface Request {\n  /**\n   * Aborts request.\n   * To use this, request interception should be enabled with `page.setRequestInterception`.\n   * @throws An exception is immediately thrown if the request interception is not enabled.\n   */\n  abort(errorCode?: ErrorCode): Promise<void>;\n\n  /**\n   * Continues request with optional request overrides.\n   * To use this, request interception should be enabled with `page.setRequestInterception`.\n   * @throws An exception is immediately thrown if the request interception is not enabled.\n   */\n  continue(overrides?: Overrides): Promise<void>;\n\n  /**\n   * @returns An object if the request failed, null otherwise.\n   */\n  failure(): { errorText: string; } | null;\n\n  /**\n   * @returns The `Frame` object that initiated the request, or `null` if navigating to error pages\n   */\n  frame(): Promise<Frame | null>;\n\n  /**\n   * An object with HTTP headers associated with the request.\n   * All header names are lower-case.\n   */\n  headers(): Headers;\n\n  /** Whether this request is driving frame's navigation. */\n   isNavigationRequest(): boolean;\n\n  /** Returns the request's method (GET, POST, etc.) */\n\n  method(): HttpMethod;\n\n  /** Contains the request's post body, if any. */\n  postData(): string | undefined;\n\n  /**\n   * A `redirectChain` is a chain of requests initiated to fetch a resource.\n   *\n   * - If there are no redirects and the request was successful, the chain will be empty.\n   * - If a server responds with at least a single redirect, then the chain will contain all the requests that were redirected.\n   *\n   * `redirectChain` is shared between all the requests of the same chain.\n   *\n   * @since 1.2.0\n   */\n  redirectChain(): Request[];\n\n  /** Contains the request's resource type as it was perceived by the rendering engine.  */\n  resourceType(): ResourceType;\n\n  /**\n   * Fulfills request with given response.\n   * To use this, request interception should be enabled with `page.setRequestInterception`.\n   * @throws An exception is immediately thrown if the request interception is not enabled.\n   * @param response The response options that will fulfill this request.\n   */\n  respond(response: RespondOptions): Promise<void>;\n\n  /** A matching `Response` object, or `null` if the response has not been received yet. */\n  response(): Response | null;\n\n  /** Contains the URL of the request. */\n  url(): string;\n}\n/** Options for `Request.respond` method */\nexport interface RespondOptions {\n  /**\n   * Specifies the response status code.\n   * @default 200\n   */\n  status?: number;\n  /** Specifies the response headers. */\n  headers?: Headers;\n  /** Specifies the Content-Type response header. */\n  contentType?: string;\n  /** Specifies the response body. */\n  body?: Buffer | string;\n}\n\n/** Response class represents responses which are received by page. */\nexport interface Response {\n  /** Promise which resolves to a buffer with response body. */\n  buffer(): Promise<Buffer>;\n  /** True if the response was served from either the browser's disk cache or memory cache. */\n  fromCache(): boolean;\n  /** True if the response was served by a service worker. */\n  fromServiceWorker(): boolean;\n  /** An object with HTTP headers associated with the response. All header names are lower-case. */\n  headers(): Headers;\n  /**\n   * Promise which resolves to a JSON representation of response body.\n   * @throws This method will throw if the response body is not parsable via `JSON.parse`.\n   */\n  json(): Promise<any>;\n  /** Contains a boolean stating whether the response was successful (status in the range 200-299) or not. */\n  ok(): boolean;\n  /** A matching Request object. */\n  request(): Request;\n  /** Contains the status code of the response (e.g., 200 for a success). */\n  status(): number;\n  /** Promise which resolves to a text representation of response body. */\n  text(): Promise<string>;\n  /** Contains the URL of the response. */\n  url(): string;\n}\n\nexport interface FrameBase extends Evalable {\n  /**\n   * The method queries frame for the selector.\n   * If there's no such element within the frame, the method will resolve to null.\n   */\n  $(selector: string): Promise<ElementHandle | null>;\n\n  /**\n   * The method runs document.querySelectorAll within the frame.\n   * If no elements match the selector, the return value resolve to [].\n   */\n  $$(selector: string): Promise<ElementHandle[]>;\n\n  /**\n   * The method evaluates the XPath expression.\n   * @param expression XPath expression to evaluate.\n   */\n  $x(expression: string): Promise<ElementHandle[]>;\n\n  /** Adds a `<script>` tag into the page with the desired url or content. */\n  addScriptTag(options: ScriptTagOptions): Promise<void>;\n\n  /** Adds a `<link rel=\"stylesheet\">` tag into the page with the desired url or a `<style type=\"text/css\">` tag with the content. */\n  addStyleTag(options: StyleTagOptions): Promise<void>;\n\n  /**\n   * This method fetches an element with selector, scrolls it into view if needed, and\n   * then uses `page.mouse` to click in the center of the element. If there's no element\n   * matching selector, the method throws an error.\n   * @param selector A selector to search for element to click. If there are multiple elements satisfying the selector, the first will be clicked.\n   * @param options Specifies the click options.\n   */\n  click(selector: string, options?: ClickOptions): Promise<void>;\n\n  /** Gets the full HTML contents of the page, including the doctype. */\n  content(): Promise<string>;\n\n  /**\n   * Evaluates a function in the browser context.\n   * If the function, passed to the frame.evaluate, returns a Promise, then frame.evaluate would wait for the promise to resolve and return its value.\n   * If the function passed into frame.evaluate returns a non-Serializable value, then frame.evaluate resolves to undefined.\n   * @param fn Function to be evaluated in browser context\n   * @param args Arguments to pass to `fn`\n   */\n  evaluate(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<any>;\n\n  /**\n   * Evaluates a function in the page context.\n   * If the function, passed to the page.evaluateHandle, returns a Promise, then page.evaluateHandle\n   * would wait for the promise to resolve and return its value.\n   * @param fn The function to be evaluated in the page context.\n   * @param args The arguments to pass to the `fn`.\n   * @returns A promise which resolves to return value of `fn`.\n   */\n  evaluateHandle(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<JSHandle>;\n\n  /** This method fetches an element with selector and focuses it. */\n  focus(selector: string): Promise<void>;\n\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if needed,\n   * and then uses page.mouse to hover over the center of the element. If there's no\n   * element matching `selector`, the method throws an error.\n   * @param selector A selector to search for element to hover. If there are multiple elements satisfying the selector, the first will be hovered.\n   */\n  hover(selector: string): Promise<void>;\n\n  /**\n   * Sets the page content.\n   * @param html HTML markup to assign to the page.\n   */\n  setContent(html: string): Promise<void>;\n\n  /**\n   * This method fetches an element with `selector`, scrolls it into view if needed,\n   * and then uses page.touchscreen to tap in the center of the element.\n   * @param selector A `selector` to search for element to tap. If there are multiple elements\n   * satisfying the selector, the first will be tapped.\n   */\n  tap(selector: string): Promise<void>;\n\n  /** Returns page's title. */\n  title(): Promise<string>;\n\n  /**\n   * Sends a `keydown`, `keypress/input`, and `keyup` event for each character in the text.\n   * @param selector A selector of an element to type into. If there are multiple elements satisfying the selector, the first will be used.\n   * @param text: A text to type into a focused element.\n   * @param options: The typing parameters.\n   */\n  type(selector: string, text: string, options?: { delay: number }): Promise<void>;\n\n  /** Returns frame's url. */\n  url(): string;\n\n  waitFor(\n    // fn can be an abritary function\n    // tslint:disable-next-line ban-types\n    selectorOrFunctionOrTimeout: string | number | Function,\n    options?: any,\n    ...args: any[]\n  ): Promise<any>;\n\n  waitForFunction(\n    // fn can be an abritary function\n    // tslint:disable-next-line ban-types\n    fn: string | Function,\n    options?: PageFnOptions,\n    ...args: any[]\n  ): Promise<any>;\n\n  waitForSelector(\n    selector: string,\n    options?: { visible?: boolean; hidden?: boolean; timeout?: number }\n  ): Promise<ElementHandle>;\n\n  waitForXPath(\n    xpath: string,\n    options?: { visible?: boolean; hidden?: boolean; timeout?: number }\n  ): Promise<ElementHandle>;\n}\n\nexport interface Frame extends FrameBase {\n  childFrames(): Frame[];\n  /** Execution context associated with this frame. */\n  executionContext(): ExecutionContext;\n  /** Returns `true` if the frame has been detached, or `false` otherwise. */\n  isDetached(): boolean;\n  /** Returns frame's name attribute as specified in the tag. */\n  name(): string;\n  /** Returns parent frame, if any. Detached frames and main frames return null. */\n  parentFrame(): Frame | null;\n}\n\nexport interface PageEventObj {\n  /** Emitted when the page closes. */\n  close: undefined;\n  /**\n   * Emitted when JavaScript within the page calls one of console API methods, e.g. console.log or console.dir.\n   * Also emitted if the page throws an error or a warning.\n   */\n  console: ConsoleMessage;\n  /**\n   * Emitted when a JavaScript dialog appears, such as alert, prompt, confirm or beforeunload.\n   * Puppeteer can respond to the dialog via Dialog's accept or dismiss methods.\n   */\n  dialog: Dialog;\n  /** Emitted when the page crashes. */\n  error: Error;\n  /** Emitted when a frame is attached. */\n  frameattached: Frame;\n  /** Emitted when a frame is detached. */\n  framedetached: Frame;\n  /** Emitted when a frame is navigated to a new url. */\n  framenavigated: Frame;\n  /** Emitted when the JavaScript load event is dispatched. */\n  load: undefined;\n  /**\n   * Emitted when the JavaScript code makes a call to `console.timeStamp`.\n   * For the list of metrics see `page.metrics`.\n   */\n  metrics: { title: string, metrics: any };\n  /** Emitted when an uncaught exception happens within the page. */\n  pageerror: string;\n  /**\n   * Emitted when a page issues a request. The request object is read-only.\n   * In order to intercept and mutate requests, see page.setRequestInterceptionEnabled.\n   */\n  request: Request;\n  /** Emitted when a request fails, for example by timing out. */\n  requestfailed: Request;\n  /** Emitted when a request finishes successfully. */\n  requestfinished: Request;\n  /** Emitted when a response is received. */\n  response: Response;\n  /** Emitted when a dedicated WebWorker is spawned by the page. */\n  workercreated: Worker;\n  /** Emitted when a dedicated WebWorker is terminated. */\n  workerdestroyed: Worker;\n}\n\nexport interface PageCloseOptions {\n  /** Defaults to `false`. Whether to run the before unload page handlers. */\n  runBeforeUnload?: boolean;\n}\n\n/** Page provides methods to interact with a single tab in Chromium. One Browser instance might have multiple Page instances. */\nexport interface Page extends EventEmitter, FrameBase {\n  /**\n   * Adds the listener function to the end of the listeners array for the event named `eventName`.\n   * No checks are made to see if the listener has already been added. Multiple calls passing the same combination of\n   * `eventName` and listener will result in the listener being added, and called, multiple times.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  on<K extends keyof PageEventObj>(\n    eventName: K,\n    handler: (e: PageEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /**\n   * Adds a one time listener function for the event named `eventName`.\n   * The next time `eventName` is triggered, this listener is removed and then invoked.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  once<K extends keyof PageEventObj>(\n    eventName: K,\n    handler: (e: PageEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /**\n   * Provide credentials for http authentication.\n   * To disable authentication, pass `null`.\n   */\n  authenticate(credentials: AuthOptions | null): Promise<void>;\n\n  /** Brings page to front (activates tab). */\n  bringToFront(): Promise<void>;\n\n  /** Get the browser the page belongs to. */\n  browser(): Promise<Browser>;\n\n  /** Closes the current page. */\n  close(options?: PageCloseOptions): Promise<void>;\n\n  /**\n   * Gets the cookies.\n   * If no URLs are specified, this method returns cookies for the current page URL.\n   * If URLs are specified, only cookies for those URLs are returned.\n   */\n  cookies(...urls: string[]): Promise<Cookie[]>;\n\n  coverage: Coverage;\n\n  /**\n   * Deletes the specified cookies.\n   */\n  deleteCookie(...cookies: DeleteCookie[]): Promise<void>;\n\n  /** Emulates given device metrics and user agent. This method is a shortcut for `setUserAgent` and `setViewport`.  */\n  emulate(options: Partial<EmulateOptions>): Promise<void>;\n\n  /** Emulates the media. */\n  emulateMedia(mediaType: 'screen' | 'print' | null): Promise<void>;\n\n  /**\n   * Evaluates a function in the page context.\n   * If the function, passed to the page.evaluateHandle, returns a Promise, then page.evaluateHandle\n   * would wait for the promise to resolve and return its value.\n   * @param fn The function to be evaluated in the page context.\n   * @param args The arguments to pass to the `fn`.\n   * @returns A promise which resolves to return value of `fn`.\n   */\n  evaluateHandle(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<JSHandle>;\n\n  /**\n   * Adds a function which would be invoked in one of the following scenarios: whenever the page is navigated; whenever the child frame is attached or navigated.\n   * The function is invoked after the document was created but before any of its scripts were run. This is useful to amend JavaScript environment, e.g. to seed Math.random.\n   * @param fn The function to be evaluated in browser context.\n   * @param args The arguments to pass to the `fn`.\n   */\n  evaluateOnNewDocument(\n    fn: EvaluateFn,\n    ...args: any[]\n  ): Promise<void>;\n\n  /**\n   * The method adds a function called name on the page's `window` object.\n   * When called, the function executes `puppeteerFunction` in node.js and returns a\n   * Promise which resolves to the return value of `puppeteerFunction`.\n   * @param name The name of the function on the window object.\n   * @param fn Callback function which will be called in Puppeteer's context.\n   */\n  exposeFunction(name: string, puppeteerFunction: (...args: any[]) => any): Promise<void>;\n\n  /** An array of all frames attached to the page. */\n  frames(): Frame[];\n\n  /**\n   * Navigate to the previous page in history.\n   * @param options The navigation parameters.\n   */\n  goBack(options?: Partial<NavigationOptions>): Promise<Response | null>;\n\n  /**\n   * Navigate to the next page in history.\n   * @param options The navigation parameters.\n   */\n  goForward(options?: Partial<NavigationOptions>): Promise<Response | null>;\n\n  /**\n   * Navigates to a URL.\n   * @param url URL to navigate page to. The url should include scheme, e.g. `https://`\n   * @param options The navigation parameters.\n   */\n  goto(url: string, options?: Partial<NavigationOptions>): Promise<Response | null>;\n\n  /** Returns the virtual keyboard. */\n  keyboard: Keyboard;\n\n  /** Indicates that the page has been closed. */\n  isClosed(): boolean;\n\n  /** Page is guaranteed to have a main frame which persists during navigation's. */\n  mainFrame(): Frame;\n\n  /** Gets the page metrics. */\n  metrics(): Promise<Metrics>;\n\n  /** Gets the virtual mouse. */\n  mouse: Mouse;\n\n  /**\n   * Generates a PDF of the page with `print` css media.\n   * To generate a pdf with `screen` media, call `page.emulateMedia('screen')` before calling `page.pdf()`:\n   * @param options The PDF parameters.\n   */\n  pdf(options?: Partial<PDFOptions>): Promise<Buffer>;\n\n  /**\n   * The method iterates JavaScript heap and finds all the objects with the given prototype.\n   * @param prototypeHandle A handle to the object prototype.\n   */\n  queryObjects(prototypeHandle: JSHandle): Promise<JSHandle>;\n\n  /**\n   * Reloads the current page.\n   * @param options The navigation parameters.\n   */\n  reload(options?: NavigationOptions): Promise<Response>;\n\n  /**\n   * Captures a screenshot of the page.\n   * @param options The screenshot options.\n   */\n  screenshot(options?: ScreenshotOptions): Promise<Buffer>;\n\n  /**\n   * Triggers a `change` and `input` event once all the provided options have been selected.\n   * If there's no `<select>` element matching selector, the method throws an error.\n   * @param selector A selector to query page for.\n   * @param values Values of options to select. If the `<select>` has the `multiple` attribute,\n   * all values are considered, otherwise only the first one is taken into account.\n   */\n  select(selector: string, ...values: string[]): Promise<string[]>;\n\n  /**\n   * Toggles bypassing page's Content-Security-Policy.\n   * NOTE CSP bypassing happens at the moment of CSP initialization rather then evaluation.\n   * Usually this means that page.setBypassCSP should be called before navigating to the domain.\n   * @param enabled sets bypassing of page's Content-Security-Policy.\n   */\n  setBypassCSP(enabled: boolean): Promise<void>;\n\n  /**\n   * Determines whether cache is enabled on the page.\n   * @param enabled Whether or not to enable cache on the page.\n   */\n  setCacheEnabled(enabled: boolean): Promise<void>;\n\n  /**\n   * Sets the cookies on the page.\n   * @param cookies The cookies to set.\n   */\n  setCookie(...cookies: SetCookie[]): Promise<void>;\n\n  /**\n   * This setting will change the default maximum navigation time of 30 seconds for the following methods:\n   * - `page.goto`\n   * - `page.goBack`\n   * - `page.goForward`\n   * - `page.reload`\n   * - `page.waitForNavigation`\n   */\n  setDefaultNavigationTimeout(timeout: number): void;\n\n  /**\n   * The extra HTTP headers will be sent with every request the page initiates.\n   * @param headers An object containing additional http headers to be sent with every request. All header values must be strings.\n   */\n  setExtraHTTPHeaders(headers: Headers): Promise<void>;\n\n  /**\n   * Determines whether JavaScript is enabled on the page.\n   * @param enable Whether or not to enable JavaScript on the page.\n   */\n  setJavaScriptEnabled(enabled: boolean): Promise<void>;\n\n  /**\n   * Determines whether the offline mode is enabled.\n   * @param enabled When `true`, enables the offline mode for the page.\n   */\n  setOfflineMode(enabled: boolean): Promise<void>;\n\n  /**\n   * Determines whether the request interception is enabled.\n   * @param enabled When `true` the methods `request.abort`, `request.continue` and `request.respond` must be used.\n   */\n  setRequestInterception(enabled: boolean): Promise<void>;\n\n  /**\n   * Specifies the User-Agent used in this page.\n   * @param userAgent The user-agent to be used in the page.\n   */\n  setUserAgent(userAgent: string): Promise<void>;\n  /**\n   * Sets the viewport of the page.\n   * @param viewport The viewport parameters.\n   */\n  setViewport(viewport: Viewport): Promise<void>;\n\n  /** @returns The target this page was created from */\n  target(): Target;\n\n  /** Returns the page's title. */\n  title(): Promise<string>;\n\n  /** Returns the virtual touchscreen object. */\n  touchscreen: Touchscreen;\n\n  /** Returns the tracing object. */\n  tracing: Tracing;\n\n  /**\n   * The page's URL. This is a shortcut for `page.mainFrame().url()`\n   */\n  url(): string;\n\n  /** Gets the page viewport. */\n  viewport(): Viewport;\n\n  /**\n   * Wait for the page navigation occur.\n   * @param options The navigation parameters.\n   */\n  waitForNavigation(options?: NavigationOptions): Promise<Response>;\n\n  /** This method returns all of the dedicated WebWorkers associated with the page. */\n  workers(): Worker[];\n}\n\n/** A Browser is created when Puppeteer connects to a Chromium instance, either through puppeteer.launch or puppeteer.connect. */\nexport interface Browser extends EventEmitter {\n  /**\n   * Adds the listener function to the end of the listeners array for the event named `eventName`.\n   * No checks are made to see if the listener has already been added. Multiple calls passing the same combination of\n   * `eventName` and listener will result in the listener being added, and called, multiple times.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  on<K extends keyof BrowserEventObj>(\n    eventName: K,\n    handler: (e: BrowserEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /**\n   * Adds a one time listener function for the event named `eventName`.\n   * The next time `eventName` is triggered, this listener is removed and then invoked.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  once<K extends keyof BrowserEventObj>(\n    eventName: K,\n    handler: (e: BrowserEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /**\n   * Returns an array of all open browser contexts.\n   * In a newly created browser, this will return a single instance of BrowserContext.\n   */\n  browserContexts(): BrowserContext[];\n\n  /**\n   * Closes browser with all the pages (if any were opened).\n   * The browser object itself is considered to be disposed and can not be used anymore.\n   */\n  close(): Promise<void>;\n\n  /**\n   * Creates a new incognito browser context.\n   * This won't share cookies/cache with other browser contexts.\n   */\n  createIncognitoBrowserContext(): Promise<BrowserContext>;\n\n  /**\n   * Disconnects Puppeteer from the browser, but leaves the Chromium process running.\n   * After calling `disconnect`, the browser object is considered disposed and cannot be used anymore.\n   */\n  disconnect(): void;\n\n  /** Promise which resolves to a new Page object. */\n  newPage(): Promise<Page>;\n\n  /** Promise which resolves to an array of all open pages. */\n  pages(): Promise<Page[]>;\n\n  /** Spawned browser process. Returns `null` if the browser instance was created with `puppeteer.connect` method */\n  process(): ChildProcess;\n\n  /** Promise which resolves to an array of all active targets. */\n  targets(): Promise<Target[]>;\n\n  /**\n   * Promise which resolves to the browser's original user agent.\n   * **NOTE** Pages can override browser user agent with `page.setUserAgent`.\n   */\n  userAgent(): Promise<string>;\n\n  /** For headless Chromium, this is similar to HeadlessChrome/61.0.3153.0. For non-headless, this is similar to Chrome/61.0.3153.0. */\n  version(): Promise<string>;\n\n  /** Browser websocket endpoint which can be used as an argument to puppeteer.connect. The format is ws://${host}:${port}/devtools/browser/<id> */\n  wsEndpoint(): string;\n}\n\nexport interface BrowserEventObj {\n  /** Emitted when puppeteer gets disconnected from the browser instance. */\n  disconnected: undefined;\n\n  /** Emitted when the url of a target changes. */\n  targetchanged: Target;\n\n  /** Emitted when a target is created, for example when a new page is opened by `window.open` or `browser.newPage`. */\n  targetcreated: Target;\n\n  /** Emitted when a target is destroyed, for example when a page is closed. */\n  targetdestroyed: Target;\n}\n\n/**\n * BrowserContexts provide a way to operate multiple independent browser sessions.\n * When a browser is launched, it has a single BrowserContext used by default.\n * The method `browser.newPage()` creates a page in the default browser context.\n */\nexport interface BrowserContext extends EventEmitter {\n  /**\n   * Adds the listener function to the end of the listeners array for the event named `eventName`.\n   * No checks are made to see if the listener has already been added. Multiple calls passing the same combination of\n   * `eventName` and listener will result in the listener being added, and called, multiple times.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  on<K extends keyof BrowserContextEventObj>(\n    eventName: K,\n    handler: (e: BrowserContextEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /**\n   * Adds a one time listener function for the event named `eventName`.\n   * The next time `eventName` is triggered, this listener is removed and then invoked.\n   * @param event The name of the event.\n   * @param handler The callback function.\n   */\n  once<K extends keyof BrowserContextEventObj>(\n    eventName: K,\n    handler: (e: BrowserContextEventObj[K], ...args: any[]) => void\n  ): this;\n\n  /** The browser this browser context belongs to. */\n  browser(): Browser;\n\n  /** Closes the browser context. All the targets that belong to the browser context will be closed. */\n  close(): Promise<void>;\n\n  /**\n   * Returns whether BrowserContext is incognito.\n   * The default browser context is the only non-incognito browser context.\n   */\n  isIncognito(): boolean;\n\n  /** Creates a new page in the browser context. */\n  newPage(): Promise<Page>;\n\n  /** An array of all active targets inside the browser context. */\n  targets(): Target[];\n}\n\nexport interface BrowserContextEventObj {\n  /** Emitted when the url of a target inside the browser context changes. */\n  targetchanged: Target;\n\n  /** Emitted when a target is created, for example when a new page is opened by `window.open` or `browserContext.newPage`. */\n  targetcreated: Target;\n\n  /** Emitted when a target is destroyed, for example when a page is closed. */\n  targetdestroyed: Target;\n}\n\nexport interface Target {\n  /** Get the browser the target belongs to. */\n  browser(): Browser;\n\n  /** The browser context the target belongs to. */\n  browserContext(): BrowserContext;\n\n  /** Creates a Chrome Devtools Protocol session attached to the target. */\n  createCDPSession(): Promise<CDPSession>;\n\n  /** Get the target that opened this target. Top-level targets return `null`. */\n  opener(): Target | null;\n\n  /** Returns the target `Page` or a `null` if the type of the page is not \"page\". */\n  page(): Promise<Page>;\n\n  /** Identifies what kind of target this is.  */\n  type(): \"page\" | \"background_page\" | \"service_worker\" | \"browser\" | \"other\";\n\n  /** Returns the target URL. */\n  url(): string;\n}\n\nexport interface LaunchOptions {\n  /** Whether to open chrome in appMode. Defaults to false. */\n  appMode?: boolean;\n  /** Whether to ignore HTTPS errors during navigation. Defaults to false. */\n  ignoreHTTPSErrors?: boolean;\n  /** Do not use `puppeteer.defaultArgs()` for launching Chromium. Defaults to false. */\n  ignoreDefaultArgs?: boolean;\n  /** Whether to run Chromium in headless mode. Defaults to true. */\n  headless?: boolean;\n  /**\n   * Path to a Chromium executable to run instead of bundled Chromium. If\n   * executablePath is a relative path, then it is resolved relative to current\n   * working directory.\n   */\n  executablePath?: string;\n  /**\n   * Slows down Puppeteer operations by the specified amount of milliseconds.\n   * Useful so that you can see what is going on.\n   */\n  slowMo?: number;\n  /**\n   * Additional arguments to pass to the Chromium instance. List of Chromium\n   * flags can be found here.\n   */\n  args?: string[];\n  /** Close chrome process on Ctrl-C. Defaults to true. */\n  handleSIGINT?: boolean;\n  /** Close chrome process on SIGTERM. Defaults to true. */\n  handleSIGTERM?: boolean;\n  /** Close chrome process on SIGHUP. Defaults to true. */\n  handleSIGHUP?: boolean;\n  /**\n   * Maximum time in milliseconds to wait for the Chrome instance to start.\n   * Defaults to 30000 (30 seconds). Pass 0 to disable timeout.\n   */\n  timeout?: number;\n  /**\n   * Whether to pipe browser process stdout and stderr into process.stdout and\n   * process.stderr. Defaults to false.\n   */\n  dumpio?: boolean;\n  /** Path to a User Data Directory. */\n  userDataDir?: string;\n  /** Specify environment variables that will be visible to Chromium. Defaults to process.env. */\n  env?: any;\n  /** Whether to auto-open DevTools panel for each tab. If this option is true, the headless option will be set false. */\n  devtools?: boolean;\n  /** Connects to the browser over a pipe instead of a WebSocket. Defaults to false. */\n  pipe?: boolean;\n}\n\nexport interface ConnectOptions {\n  /** A browser websocket endpoint to connect to. */\n  browserWSEndpoint?: string;\n  /**\n   * Whether to ignore HTTPS errors during navigation.\n   * @default false\n   */\n  ignoreHTTPSErrors?: boolean;\n}\n\nexport interface CDPSession extends EventEmitter {\n  /**\n   * Detaches session from target. Once detached, session won't emit any events and can't be used\n   * to send messages.\n   */\n  detach(): Promise<void>;\n\n  /**\n   * @param method Protocol method name\n   */\n  send(method: string, params?: object): Promise<any>;\n}\n\nexport interface Coverage {\n  startCSSCoverage(options?: StartCoverageOptions): Promise<void>;\n  startJSCoverage(options?: StartCoverageOptions): Promise<void>;\n  stopCSSCoverage(): Promise<CoverageEntry[]>;\n  stopJSCoverage(): Promise<CoverageEntry[]>;\n}\n\nexport interface StartCoverageOptions {\n  /** Whether to reset coverage on every navigation. Defaults to `true`. */\n  resetOnNavigation?: boolean;\n}\n\nexport interface CoverageEntry {\n  url: string;\n  text: string;\n  ranges: Array<{start: number, end: number}>;\n}\n\n/** Attaches Puppeteer to an existing Chromium instance */\nexport function connect(options?: ConnectOptions): Promise<Browser>;\n/** The default flags that Chromium will be launched with */\nexport function defaultArgs(): string[];\n/** Path where Puppeteer expects to find bundled Chromium */\nexport function executablePath(): string;\n/** The method launches a browser instance with given arguments. The browser will be closed when the parent node.js process is closed. */\nexport function launch(options?: LaunchOptions): Promise<Browser>;\n","typesLocation":"https://unpkg.com/@types/puppeteer/index.d.ts"},"request-promise-native":{"name":"request-promise-native","downloadsLast30Days":5236165,"downloadsRatio":0.02202936663705907,"humanDownloadsLast30Days":"5.2m","popular":true,"version":"1.0.5","versions":{"0.0.0":"2016-05-07T06:44:22.851Z","1.0.0":"2016-07-16T00:23:18.177Z","1.0.1":"2016-07-18T00:20:25.049Z","1.0.2":"2016-07-18T20:12:17.633Z","1.0.3":"2016-08-08T11:27:17.880Z","1.0.4":"2017-05-08T01:54:45.758Z","1.0.5":"2017-09-22T16:54:16.350Z"},"tags":{"latest":"1.0.5"},"description":"The simplified HTTP request client &#39;request&#39; with Promise support. Powered by native ES6 promises.","dependencies":{"request-promise-core":"1.1.1","stealthy-require":"^1.1.0","tough-cookie":"&gt;=2.3.3"},"devDependencies":{"body-parser":"~1.15.2","chai":"~3.5.0","chalk":"~1.1.3","gulp":"~3.9.1","gulp-coveralls":"~0.1.4","gulp-eslint":"~2.1.0","gulp-istanbul":"~1.0.0","gulp-mocha":"~2.2.0","lodash":"~4.13.1","publish-please":"~2.1.4","request":"^2.34.0","rimraf":"~2.5.3","run-sequence":"~1.2.2"},"repository":{"url":"https://github.com/request/request-promise-native","project":"request-promise-native","user":"request","host":"github.com","path":"","head":"1874877850a59152915c9e9cbacbdc577486cca5","branch":"1874877850a59152915c9e9cbacbdc577486cca5"},"githubRepo":{"user":"request","project":"request-promise-native","path":"","head":"1874877850a59152915c9e9cbacbdc577486cca5"},"gitHead":"1874877850a59152915c9e9cbacbdc577486cca5","readme":"<a href=\"http://promisesaplus.com/\">\n    <img src=\"https://promises-aplus.github.io/promises-spec/assets/logo-small.png\" align=\"right\" alt=\"Promises/A+ logo\" />\n</a>\n\n# Request-Promise-Native\n\n[![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square&maxAge=2592000)](https://gitter.im/request/request-promise?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://img.shields.io/travis/request/request-promise-native/master.svg?style=flat-square&maxAge=2592000)](https://travis-ci.org/request/request-promise-native)\n[![Coverage Status](https://img.shields.io/coveralls/request/request-promise-native.svg?style=flat-square&maxAge=2592000)](https://coveralls.io/r/request/request-promise-native)\n[![Dependency Status](https://img.shields.io/david/request/request-promise-native.svg?style=flat-square&maxAge=2592000)](https://david-dm.org/request/request-promise-native)\n[![Known Vulnerabilities](https://snyk.io/test/npm/request-promise-native/badge.svg?style=flat-square&maxAge=2592000)](https://snyk.io/test/npm/request-promise-native)\n\nThis package is similar to [`request-promise`](https://www.npmjs.com/package/request-promise) but uses native ES6 promises.\n\nPlease refer to the [`request-promise` documentation](https://www.npmjs.com/package/request-promise). Everything applies to `request-promise-native` except the following:\n- Instead of using Bluebird promises this library uses native ES6 promises.\n- Mind that native ES6 promises have fewer features than Bluebird promises do. In particular, the `.finally(...)` method is not available.\n\n## Installation\n\nThis module is installed via npm:\n\n```\nnpm install --save request\nnpm install --save request-promise-native\n```\n\n`request` is defined as a peer-dependency and thus has to be installed separately.\n\n## Migration from `request-promise` to `request-promise-native`\n\n1. Go through the [migration instructions](https://github.com/request/request-promise#migration-from-v3-to-v4) to upgrade to `request-promise` v4.\n2. Ensure that you don't use Bluebird-specific features on the promise returned by your request calls. In particular, you can't use `.finally(...)` anymore.\n3. You are done.\n\n## Contributing\n\nTo set up your development environment:\n\n1. clone the repo to your desktop,\n2. in the shell `cd` to the main folder,\n3. hit `npm install`,\n4. hit `npm install gulp -g` if you haven't installed gulp globally yet, and\n5. run `gulp dev`. (Or run `node ./node_modules/.bin/gulp dev` if you don't want to install gulp globally.)\n\n`gulp dev` watches all source files and if you save some changes it will lint the code and execute all tests. The test coverage report can be viewed from `./coverage/lcov-report/index.html`.\n\nIf you want to debug a test you should use `gulp test-without-coverage` to run all tests without obscuring the code by the test coverage instrumentation.\n\n## Change History\n\n- v1.0.5 (2017-09-22)\n    - Upgraded `tough-cookie` to a version without regex DoS vulnerability\n      *(Thanks to @sophieklm for [pull request #13](https://github.com/request/request-promise-native/pull/13))*\n- v1.0.4 (2017-05-07)\n    - Fix that allows to use `tough-cookie` for [cookie creation](https://github.com/request/request-promise#include-a-cookie)\n- v1.0.3 (2016-08-08)\n    - Renamed internally used package `@request/promise-core` to `request-promise-core` because there where [too](https://github.com/request/request-promise/issues/137) [many](https://github.com/request/request-promise/issues/141) issues with the scoped package name\n- v1.0.2 (2016-07-18)\n    - Fix for using with module bundlers like Webpack and Browserify\n- v1.0.1 (2016-07-17)\n    - Fixed `@request/promise-core` version for safer versioning\n- v1.0.0 (2016-07-15)\n    - Initial version similar to [`request-promise`](https://www.npmjs.com/package/request-promise) v4\n\n## License (ISC)\n\nIn case you never heard about the [ISC license](http://en.wikipedia.org/wiki/ISC_license) it is functionally equivalent to the MIT license.\n\nSee the [LICENSE file](LICENSE) for details.\n","owner":{"name":"request","avatar":"https://github.com/request.png","link":"https://github.com/request"},"deprecated":false,"homepage":null,"license":"ISC","keywords":["xhr","http","https","promise","request","then","thenable","native"],"computedKeywords":[],"computedMetadata":{},"created":1462603462851,"modified":1519978050236,"lastPublisher":{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org","avatar":"https://gravatar.com/avatar/ada41349560ddf94a070d6588a7baafe","link":"https://www.npmjs.com/~analog-nico"},"owners":[{"name":"analog-nico","email":"nicolai.kamenzky@testrails.org","avatar":"https://gravatar.com/avatar/ada41349560ddf94a070d6588a7baafe","link":"https://www.npmjs.com/~analog-nico"},{"name":"request","email":"request@outofindex.com","avatar":"https://gravatar.com/avatar/c47cc9cf8e9a0154c915ee6daa7e8f79","link":"https://www.npmjs.com/~request"}],"lastCrawl":"2018-07-04T18:56:24.810Z","_searchInternal":{"concatenatedName":"requestpromisenative","alternativeNames":["requestpromisenative","request promise native","request-promise-native"],"popularName":"request-promise-native","downloadsMagnitude":7},"dependents":0,"humanDependents":"0","changelogFilename":null,"objectID":"request-promise-native","_highlightResult":{"name":{"value":"<em>request-promise-native</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request","promise","native"]},"description":{"value":"The simplified HTTP request client 'request' with Promise support. Powered by native ES6 promises.","matchLevel":"none","matchedWords":[]},"owner":{"name":{"value":"request","matchLevel":"none","matchedWords":[]}},"keywords":[{"value":"xhr","matchLevel":"none","matchedWords":[]},{"value":"http","matchLevel":"none","matchedWords":[]},{"value":"https","matchLevel":"none","matchedWords":[]},{"value":"promise","matchLevel":"none","matchedWords":[]},{"value":"request","matchLevel":"none","matchedWords":[]},{"value":"then","matchLevel":"none","matchedWords":[]},{"value":"thenable","matchLevel":"none","matchedWords":[]},{"value":"native","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"analog-nico","matchLevel":"none","matchedWords":[]}},{"name":{"value":"request","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>requestpromisenative</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request","promise","native"]},{"value":"<em>request promise native</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request","promise","native"]},{"value":"<em>request-promise-native</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request","promise","native"]}],"popularName":{"value":"<em>request-promise-native</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request","promise","native"]}}},"types":"// Type definitions for request-promise-native 1.0\n// Project: https://github.com/request/request-promise-native\n// Definitions by: Gustavo Henke <https://github.com/gustavohenke>\n//                 Matt R. Wilson <https://github.com/mastermatt>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\nimport request = require('request');\nimport http = require('http');\n\ndeclare namespace requestPromise {\n    interface RequestPromise<T = any> extends request.Request {\n        then: Promise<T>[\"then\"];\n        catch: Promise<T>[\"catch\"];\n        promise(): Promise<T>;\n    }\n\n    interface RequestPromiseOptions extends request.CoreOptions {\n        simple?: boolean;\n        transform?(body: any, response: request.Response, resolveWithFullResponse?: boolean): any;\n        transform2xxOnly?: boolean;\n        resolveWithFullResponse?: boolean;\n    }\n\n    type FullResponse = request.Response;\n    type OptionsWithUri = request.UriOptions & RequestPromiseOptions;\n    type OptionsWithUrl = request.UrlOptions & RequestPromiseOptions;\n    type Options = OptionsWithUri | OptionsWithUrl;\n}\n\ndeclare const requestPromise: request.RequestAPI<requestPromise.RequestPromise, requestPromise.RequestPromiseOptions, request.RequiredUriUrl>;\nexport = requestPromise;\n","typesLocation":"https://unpkg.com/@types/request-promise-native/index.d.ts"},"request":{"name":"request","downloadsLast30Days":51821758,"downloadsRatio":0.2180222561280916,"humanDownloadsLast30Days":"51.8m","popular":true,"version":"2.87.0","versions":{"0.10.0":"2011-01-22T00:36:12.640Z","0.8.3":"2011-01-22T00:36:12.640Z","0.9.0":"2011-01-22T00:36:12.640Z","0.9.1":"2011-01-22T00:36:12.640Z","0.9.5":"2011-01-22T00:36:12.640Z","1.0.0":"2011-01-22T00:36:12.640Z","1.1.0":"2011-01-23T01:14:46.626Z","1.1.1":"2011-01-23T01:38:57.823Z","1.2.0":"2011-01-30T22:05:41.553Z","1.9.0":"2011-02-11T00:10:06.903Z","1.9.1":"2011-03-22T18:07:16.344Z","1.9.2":"2011-03-22T18:29:21.464Z","1.9.3":"2011-03-22T18:32:57.223Z","1.9.5":"2011-03-27T22:30:25.139Z","1.9.7":"2011-06-23T17:36:13.839Z","1.9.8":"2011-06-23T21:15:20.971Z","1.9.9":"2011-07-21T02:03:21.081Z","2.0.0":"2011-07-21T21:10:38.897Z","2.0.1":"2011-07-21T22:22:13.282Z","2.0.2":"2011-07-29T20:48:36.410Z","2.0.3":"2011-08-12T23:16:25.100Z","2.0.4":"2011-08-13T21:28:21.109Z","2.0.5":"2011-08-13T21:46:39.966Z","2.1.0":"2011-08-15T04:03:17.126Z","2.1.1":"2011-08-23T03:59:30.206Z","2.2.0":"2011-11-06T01:40:00.212Z","2.2.5":"2011-11-17T06:35:04.405Z","2.2.6":"2011-12-01T07:38:36.311Z","2.2.9":"2011-12-01T08:39:41.637Z","2.9.0":"2011-12-28T00:47:33.584Z","2.9.1":"2011-12-28T01:02:20.539Z","2.9.2":"2011-12-28T01:04:02.634Z","2.9.3":"2011-12-28T01:49:19.797Z","2.9.100":"2012-01-20T21:25:15.722Z","2.9.150":"2012-02-24T17:53:29.835Z","2.9.151":"2012-02-24T23:08:55.848Z","2.9.152":"2012-02-25T20:55:24.387Z","2.9.153":"2012-03-01T23:43:34.140Z","2.9.200":"2012-04-08T00:41:38.386Z","2.9.201":"2012-04-12T17:44:37.172Z","2.9.202":"2012-04-14T01:48:20.232Z","2.9.203":"2012-06-28T19:58:58.857Z","2.10.0":"2012-08-01T20:56:37.322Z","2.11.0":"2012-08-29T19:18:28.340Z","2.11.1":"2012-09-04T15:20:46.781Z","2.11.2":"2012-09-17T19:19:33.839Z","2.11.3":"2012-09-17T19:20:14.479Z","2.11.4":"2012-09-17T19:34:20.945Z","2.12.0":"2012-11-09T21:49:57.215Z","2.14.0":"2013-02-19T23:53:42.323Z","2.16.0":"2013-03-13T17:48:37.937Z","2.16.2":"2013-03-13T20:46:28.455Z","2.16.4":"2013-03-18T19:16:10.266Z","2.16.6":"2013-03-18T22:48:42.025Z","2.18.0":"2013-04-22T15:53:37.983Z","2.19.0":"2013-04-22T16:48:30.477Z","2.20.0":"2013-04-22T21:49:15.616Z","2.21.0":"2013-04-30T21:28:44.759Z","2.22.0":"2013-07-05T17:12:48.170Z","2.23.0":"2013-07-23T02:45:03.153Z","2.24.0":"2013-07-23T20:51:33.068Z","2.25.0":"2013-07-23T21:51:30.696Z","2.26.0":"2013-08-07T16:31:07.773Z","2.27.0":"2013-08-15T21:30:34.410Z","2.28.0":"2013-12-04T19:42:46.371Z","2.29.0":"2013-12-06T20:05:35.433Z","2.30.0":"2013-12-13T19:17:56.851Z","2.31.0":"2014-01-08T02:57:12.510Z","2.32.0":"2014-01-16T19:33:18.069Z","2.33.0":"2014-01-16T19:48:02.613Z","2.34.0":"2014-02-18T19:35:27.908Z","2.35.0":"2014-05-17T20:56:43.641Z","2.36.0":"2014-05-19T20:58:14.683Z","2.37.0":"2014-07-07T17:24:45.290Z","2.38.0":"2014-07-22T13:44:48.332Z","2.39.0":"2014-07-24T02:20:50.881Z","2.40.0":"2014-08-06T18:29:34.302Z","2.41.0":"2014-09-04T20:36:17.279Z","2.42.0":"2014-09-04T22:24:16.945Z","2.43.0":"2014-09-18T10:51:34.944Z","2.44.0":"2014-09-18T10:53:09.149Z","2.45.0":"2014-10-06T00:06:02.756Z","2.46.0":"2014-10-23T16:34:08.339Z","2.47.0":"2014-10-26T23:52:13.024Z","2.48.0":"2014-11-12T17:08:56.247Z","2.49.0":"2014-11-28T18:12:39.597Z","2.50.0":"2014-12-09T15:36:36.588Z","2.51.0":"2014-12-10T15:08:10.339Z","2.52.0":"2015-02-02T00:58:58.406Z","2.53.0":"2015-02-02T16:09:19.191Z","2.54.0":"2015-03-24T22:01:04.401Z","2.55.0":"2015-04-05T04:24:35.395Z","2.56.0":"2015-05-28T18:03:06.887Z","2.57.0":"2015-05-31T19:04:35.520Z","2.58.0":"2015-06-16T11:28:02.894Z","2.59.0":"2015-07-20T08:49:43.418Z","2.60.0":"2015-07-21T12:29:31.604Z","2.61.0":"2015-08-19T15:39:45.178Z","2.62.0":"2015-09-15T08:23:47.863Z","2.63.0":"2015-09-21T14:00:39.341Z","2.64.0":"2015-09-25T12:21:27.306Z","2.65.0":"2015-10-11T18:04:53.725Z","2.66.0":"2015-11-18T10:07:33.695Z","2.67.0":"2015-11-19T07:45:48.220Z","2.68.0":"2016-01-27T16:20:27.766Z","2.69.0":"2016-01-27T19:00:03.126Z","2.70.0":"2016-04-05T10:07:28.642Z","2.71.0":"2016-04-12T13:09:36.572Z","2.72.0":"2016-04-17T13:53:37.912Z","2.73.0":"2016-07-09T07:43:25.258Z","2.74.0":"2016-07-22T23:44:44.438Z","2.75.0":"2016-09-17T22:33:28.885Z","2.76.0":"2016-10-25T08:57:56.992Z","2.77.0":"2016-11-03T11:17:58.147Z","2.78.0":"2016-11-03T13:38:05.614Z","2.79.0":"2016-11-18T17:21:08.710Z","2.80.0":"2017-03-04T04:42:42.782Z","2.81.0":"2017-03-09T15:56:47.595Z","2.82.0":"2017-09-19T19:39:30.271Z","2.83.0":"2017-09-27T03:00:36.500Z","2.84.0":"2018-03-12T08:40:34.279Z","2.85.0":"2018-03-12T10:37:49.925Z","2.86.0":"2018-05-15T12:06:18.253Z","2.87.0":"2018-05-21T07:35:02.834Z"},"tags":{"latest":"2.87.0"},"description":"Simplified HTTP request client.","dependencies":{"aws-sign2":"~0.7.0","aws4":"^1.6.0","caseless":"~0.12.0","combined-stream":"~1.0.5","extend":"~3.0.1","forever-agent":"~0.6.1","form-data":"~2.3.1","har-validator":"~5.0.3","http-signature":"~1.2.0","is-typedarray":"~1.0.0","isstream":"~0.1.2","json-stringify-safe":"~5.0.1","mime-types":"~2.1.17","oauth-sign":"~0.8.2","performance-now":"^2.1.0","qs":"~6.5.1","safe-buffer":"^5.1.1","tough-cookie":"~2.3.3","tunnel-agent":"^0.6.0","uuid":"^3.1.0"},"devDependencies":{"bluebird":"^3.2.1","browserify":"^13.0.1","browserify-istanbul":"^2.0.0","buffer-equal":"^1.0.0","codecov":"^2.0.2","coveralls":"^2.11.4","function-bind":"^1.0.2","istanbul":"^0.4.0","karma":"^1.1.1","karma-browserify":"^5.0.1","karma-cli":"^1.0.0","karma-coverage":"^1.0.0","karma-phantomjs-launcher":"^1.0.0","karma-tap":"^3.0.1","phantomjs-prebuilt":"^2.1.3","rimraf":"^2.2.8","server-destroy":"^1.0.1","standard":"^9.0.0","tape":"^4.6.0","taper":"^0.5.0"},"repository":{"url":"https://github.com/request/request","project":"request","user":"request","host":"github.com","path":"","head":"02fc5b1f0123173c308a79c43e804f6fcbefbbaf","branch":"02fc5b1f0123173c308a79c43e804f6fcbefbbaf"},"githubRepo":{"user":"request","project":"request","path":"","head":"02fc5b1f0123173c308a79c43e804f6fcbefbbaf"},"gitHead":"02fc5b1f0123173c308a79c43e804f6fcbefbbaf","readme":"\n# Request - Simplified HTTP client\n\n[![npm package](https://nodei.co/npm/request.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/request/)\n\n[![Build status](https://img.shields.io/travis/request/request/master.svg?style=flat-square)](https://travis-ci.org/request/request)\n[![Coverage](https://img.shields.io/codecov/c/github/request/request.svg?style=flat-square)](https://codecov.io/github/request/request?branch=master)\n[![Coverage](https://img.shields.io/coveralls/request/request.svg?style=flat-square)](https://coveralls.io/r/request/request)\n[![Dependency Status](https://img.shields.io/david/request/request.svg?style=flat-square)](https://david-dm.org/request/request)\n[![Known Vulnerabilities](https://snyk.io/test/npm/request/badge.svg?style=flat-square)](https://snyk.io/test/npm/request)\n[![Gitter](https://img.shields.io/badge/gitter-join_chat-blue.svg?style=flat-square)](https://gitter.im/request/request?utm_source=badge)\n\n\n## Super simple to use\n\nRequest is designed to be the simplest way possible to make http calls. It supports HTTPS and follows redirects by default.\n\n```js\nvar request = require('request');\nrequest('http://www.google.com', function (error, response, body) {\n  console.log('error:', error); // Print the error if one occurred\n  console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received\n  console.log('body:', body); // Print the HTML for the Google homepage.\n});\n```\n\n\n## Table of contents\n\n- [Streaming](#streaming)\n- [Promises & Async/Await](#promises--asyncawait)\n- [Forms](#forms)\n- [HTTP Authentication](#http-authentication)\n- [Custom HTTP Headers](#custom-http-headers)\n- [OAuth Signing](#oauth-signing)\n- [Proxies](#proxies)\n- [Unix Domain Sockets](#unix-domain-sockets)\n- [TLS/SSL Protocol](#tlsssl-protocol)\n- [Support for HAR 1.2](#support-for-har-12)\n- [**All Available Options**](#requestoptions-callback)\n\nRequest also offers [convenience methods](#convenience-methods) like\n`request.defaults` and `request.post`, and there are\nlots of [usage examples](#examples) and several\n[debugging techniques](#debugging).\n\n\n---\n\n\n## Streaming\n\nYou can stream any response to a file stream.\n\n```js\nrequest('http://google.com/doodle.png').pipe(fs.createWriteStream('doodle.png'))\n```\n\nYou can also stream a file to a PUT or POST request. This method will also check the file extension against a mapping of file extensions to content-types (in this case `application/json`) and use the proper `content-type` in the PUT request (if the headers donât already provide one).\n\n```js\nfs.createReadStream('file.json').pipe(request.put('http://mysite.com/obj.json'))\n```\n\nRequest can also `pipe` to itself. When doing so, `content-type` and `content-length` are preserved in the PUT headers.\n\n```js\nrequest.get('http://google.com/img.png').pipe(request.put('http://mysite.com/img.png'))\n```\n\nRequest emits a \"response\" event when a response is received. The `response` argument will be an instance of [http.IncomingMessage](https://nodejs.org/api/http.html#http_class_http_incomingmessage).\n\n```js\nrequest\n  .get('http://google.com/img.png')\n  .on('response', function(response) {\n    console.log(response.statusCode) // 200\n    console.log(response.headers['content-type']) // 'image/png'\n  })\n  .pipe(request.put('http://mysite.com/img.png'))\n```\n\nTo easily handle errors when streaming requests, listen to the `error` event before piping:\n\n```js\nrequest\n  .get('http://mysite.com/doodle.png')\n  .on('error', function(err) {\n    console.log(err)\n  })\n  .pipe(fs.createWriteStream('doodle.png'))\n```\n\nNow letâs get fancy.\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    if (req.method === 'PUT') {\n      req.pipe(request.put('http://mysite.com/doodle.png'))\n    } else if (req.method === 'GET' || req.method === 'HEAD') {\n      request.get('http://mysite.com/doodle.png').pipe(resp)\n    }\n  }\n})\n```\n\nYou can also `pipe()` from `http.ServerRequest` instances, as well as to `http.ServerResponse` instances. The HTTP method, headers, and entity-body data will be sent. Which means that, if you don't really care about security, you can do:\n\n```js\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    var x = request('http://mysite.com/doodle.png')\n    req.pipe(x)\n    x.pipe(resp)\n  }\n})\n```\n\nAnd since `pipe()` returns the destination stream in â¥ Node 0.5.x you can do one line proxying. :)\n\n```js\nreq.pipe(request('http://mysite.com/doodle.png')).pipe(resp)\n```\n\nAlso, none of this new functionality conflicts with requests previous features, it just expands them.\n\n```js\nvar r = request.defaults({'proxy':'http://localproxy.com'})\n\nhttp.createServer(function (req, resp) {\n  if (req.url === '/doodle.png') {\n    r.get('http://google.com/doodle.png').pipe(resp)\n  }\n})\n```\n\nYou can still use intermediate proxies, the requests will still follow HTTP forwards, etc.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Promises & Async/Await\n\n`request` supports both streaming and callback interfaces natively. If you'd like `request` to return a Promise instead, you can use an alternative interface wrapper for `request`. These wrappers can be useful if you prefer to work with Promises, or if you'd like to use `async`/`await` in ES2017.\n\nSeveral alternative interfaces are provided by the request team, including:\n- [`request-promise`](https://github.com/request/request-promise) (uses [Bluebird](https://github.com/petkaantonov/bluebird) Promises)\n- [`request-promise-native`](https://github.com/request/request-promise-native) (uses native Promises)\n- [`request-promise-any`](https://github.com/request/request-promise-any) (uses [any-promise](https://www.npmjs.com/package/any-promise) Promises)\n\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Forms\n\n`request` supports `application/x-www-form-urlencoded` and `multipart/form-data` form uploads. For `multipart/related` refer to the `multipart` API.\n\n\n#### application/x-www-form-urlencoded (URL-Encoded Forms)\n\nURL-encoded forms are simple.\n\n```js\nrequest.post('http://service.com/upload', {form:{key:'value'}})\n// or\nrequest.post('http://service.com/upload').form({key:'value'})\n// or\nrequest.post({url:'http://service.com/upload', form: {key:'value'}}, function(err,httpResponse,body){ /* ... */ })\n```\n\n\n#### multipart/form-data (Multipart Form Uploads)\n\nFor `multipart/form-data` we use the [form-data](https://github.com/form-data/form-data) library by [@felixge](https://github.com/felixge). For the most cases, you can pass your upload form data via the `formData` option.\n\n\n```js\nvar formData = {\n  // Pass a simple key-value pair\n  my_field: 'my_value',\n  // Pass data via Buffers\n  my_buffer: Buffer.from([1, 2, 3]),\n  // Pass data via Streams\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n  // Pass multiple values /w an Array\n  attachments: [\n    fs.createReadStream(__dirname + '/attachment1.jpg'),\n    fs.createReadStream(__dirname + '/attachment2.jpg')\n  ],\n  // Pass optional meta-data with an 'options' object with style: {value: DATA, options: OPTIONS}\n  // Use case: for some types of streams, you'll need to provide \"file\"-related information manually.\n  // See the `form-data` README for more information about options: https://github.com/form-data/form-data\n  custom_file: {\n    value:  fs.createReadStream('/dev/urandom'),\n    options: {\n      filename: 'topsecret.jpg',\n      contentType: 'image/jpeg'\n    }\n  }\n};\nrequest.post({url:'http://service.com/upload', formData: formData}, function optionalCallback(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});\n```\n\nFor advanced cases, you can access the form-data object itself via `r.form()`. This can be modified until the request is fired on the next cycle of the event-loop. (Note that this calling `form()` will clear the currently set form data for that request.)\n\n```js\n// NOTE: Advanced use-case, for normal use see 'formData' usage above\nvar r = request.post('http://service.com/upload', function optionalCallback(err, httpResponse, body) {...})\nvar form = r.form();\nform.append('my_field', 'my_value');\nform.append('my_buffer', Buffer.from([1, 2, 3]));\nform.append('custom_file', fs.createReadStream(__dirname + '/unicycle.jpg'), {filename: 'unicycle.jpg'});\n```\nSee the [form-data README](https://github.com/form-data/form-data) for more information & examples.\n\n\n#### multipart/related\n\nSome variations in different HTTP implementations require a newline/CRLF before, after, or both before and after the boundary of a `multipart/related` request (using the multipart option). This has been observed in the .NET WebAPI version 4.0. You can turn on a boundary preambleCRLF or postamble by passing them as `true` to your request options.\n\n```js\n  request({\n    method: 'PUT',\n    preambleCRLF: true,\n    postambleCRLF: true,\n    uri: 'http://service.com/upload',\n    multipart: [\n      {\n        'content-type': 'application/json',\n        body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n      },\n      { body: 'I am an attachment' },\n      { body: fs.createReadStream('image.png') }\n    ],\n    // alternatively pass an object containing additional options\n    multipart: {\n      chunked: false,\n      data: [\n        {\n          'content-type': 'application/json',\n          body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        },\n        { body: 'I am an attachment' }\n      ]\n    }\n  },\n  function (error, response, body) {\n    if (error) {\n      return console.error('upload failed:', error);\n    }\n    console.log('Upload successful!  Server responded with:', body);\n  })\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## HTTP Authentication\n\n```js\nrequest.get('http://some.server.com/').auth('username', 'password', false);\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'user': 'username',\n    'pass': 'password',\n    'sendImmediately': false\n  }\n});\n// or\nrequest.get('http://some.server.com/').auth(null, null, true, 'bearerToken');\n// or\nrequest.get('http://some.server.com/', {\n  'auth': {\n    'bearer': 'bearerToken'\n  }\n});\n```\n\nIf passed as an option, `auth` should be a hash containing values:\n\n- `user` || `username`\n- `pass` || `password`\n- `sendImmediately` (optional)\n- `bearer` (optional)\n\nThe method form takes parameters\n`auth(username, password, sendImmediately, bearer)`.\n\n`sendImmediately` defaults to `true`, which causes a basic or bearer\nauthentication header to be sent. If `sendImmediately` is `false`, then\n`request` will retry with a proper authentication header after receiving a\n`401` response from the server (which must contain a `WWW-Authenticate` header\nindicating the required authentication method).\n\nNote that you can also specify basic authentication using the URL itself, as\ndetailed in [RFC 1738](http://www.ietf.org/rfc/rfc1738.txt). Simply pass the\n`user:password` before the host with an `@` sign:\n\n```js\nvar username = 'username',\n    password = 'password',\n    url = 'http://' + username + ':' + password + '@some.server.com';\n\nrequest({url: url}, function (error, response, body) {\n   // Do more stuff with 'body' here\n});\n```\n\nDigest authentication is supported, but it only works with `sendImmediately`\nset to `false`; otherwise `request` will send basic authentication on the\ninitial request, which will probably cause the request to fail.\n\nBearer authentication is supported, and is activated when the `bearer` value is\navailable. The value may be either a `String` or a `Function` returning a\n`String`. Using a function to supply the bearer token is particularly useful if\nused in conjunction with `defaults` to allow a single function to supply the\nlast known token at the time of sending a request, or to compute one on the fly.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Custom HTTP Headers\n\nHTTP Headers, such as `User-Agent`, can be set in the `options` object.\nIn the example below, we call the github API to find out the number\nof stars and forks for the request repository. This requires a\ncustom `User-Agent` header as well as https.\n\n```js\nvar request = require('request');\n\nvar options = {\n  url: 'https://api.github.com/repos/request/request',\n  headers: {\n    'User-Agent': 'request'\n  }\n};\n\nfunction callback(error, response, body) {\n  if (!error && response.statusCode == 200) {\n    var info = JSON.parse(body);\n    console.log(info.stargazers_count + \" Stars\");\n    console.log(info.forks_count + \" Forks\");\n  }\n}\n\nrequest(options, callback);\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## OAuth Signing\n\n[OAuth version 1.0](https://tools.ietf.org/html/rfc5849) is supported. The\ndefault signing algorithm is\n[HMAC-SHA1](https://tools.ietf.org/html/rfc5849#section-3.4.2):\n\n```js\n// OAuth1.0 - 3-legged server side flow (Twitter example)\n// step 1\nvar qs = require('querystring')\n  , oauth =\n    { callback: 'http://mysite.com/callback/'\n    , consumer_key: CONSUMER_KEY\n    , consumer_secret: CONSUMER_SECRET\n    }\n  , url = 'https://api.twitter.com/oauth/request_token'\n  ;\nrequest.post({url:url, oauth:oauth}, function (e, r, body) {\n  // Ideally, you would take the body in the response\n  // and construct a URL that a user clicks on (like a sign in button).\n  // The verifier is only available in the response after a user has\n  // verified with twitter that they are authorizing your app.\n\n  // step 2\n  var req_data = qs.parse(body)\n  var uri = 'https://api.twitter.com/oauth/authenticate'\n    + '?' + qs.stringify({oauth_token: req_data.oauth_token})\n  // redirect the user to the authorize uri\n\n  // step 3\n  // after the user is redirected back to your server\n  var auth_data = qs.parse(body)\n    , oauth =\n      { consumer_key: CONSUMER_KEY\n      , consumer_secret: CONSUMER_SECRET\n      , token: auth_data.oauth_token\n      , token_secret: req_data.oauth_token_secret\n      , verifier: auth_data.oauth_verifier\n      }\n    , url = 'https://api.twitter.com/oauth/access_token'\n    ;\n  request.post({url:url, oauth:oauth}, function (e, r, body) {\n    // ready to make signed requests on behalf of the user\n    var perm_data = qs.parse(body)\n      , oauth =\n        { consumer_key: CONSUMER_KEY\n        , consumer_secret: CONSUMER_SECRET\n        , token: perm_data.oauth_token\n        , token_secret: perm_data.oauth_token_secret\n        }\n      , url = 'https://api.twitter.com/1.1/users/show.json'\n      , qs =\n        { screen_name: perm_data.screen_name\n        , user_id: perm_data.user_id\n        }\n      ;\n    request.get({url:url, oauth:oauth, qs:qs, json:true}, function (e, r, user) {\n      console.log(user)\n    })\n  })\n})\n```\n\nFor [RSA-SHA1 signing](https://tools.ietf.org/html/rfc5849#section-3.4.3), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'RSA-SHA1'`\n* Instead of `consumer_secret`, specify a `private_key` string in\n  [PEM format](http://how2ssl.com/articles/working_with_pem_files/)\n\nFor [PLAINTEXT signing](http://oauth.net/core/1.0/#anchor22), make\nthe following changes to the OAuth options object:\n* Pass `signature_method : 'PLAINTEXT'`\n\nTo send OAuth parameters via query params or in a post body as described in The\n[Consumer Request Parameters](http://oauth.net/core/1.0/#consumer_req_param)\nsection of the oauth1 spec:\n* Pass `transport_method : 'query'` or `transport_method : 'body'` in the OAuth\n  options object.\n* `transport_method` defaults to `'header'`\n\nTo use [Request Body Hash](https://oauth.googlecode.com/svn/spec/ext/body_hash/1.0/oauth-bodyhash.html) you can either\n* Manually generate the body hash and pass it as a string `body_hash: '...'`\n* Automatically generate the body hash by passing `body_hash: true`\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Proxies\n\nIf you specify a `proxy` option, then the request (and any subsequent\nredirects) will be sent via a connection to the proxy server.\n\nIf your endpoint is an `https` url, and you are using a proxy, then\nrequest will send a `CONNECT` request to the proxy server *first*, and\nthen use the supplied connection to connect to the endpoint.\n\nThat is, first it will make a request like:\n\n```\nHTTP/1.1 CONNECT endpoint-server.com:80\nHost: proxy-server.com\nUser-Agent: whatever user agent you specify\n```\n\nand then the proxy server make a TCP connection to `endpoint-server`\non port `80`, and return a response that looks like:\n\n```\nHTTP/1.1 200 OK\n```\n\nAt this point, the connection is left open, and the client is\ncommunicating directly with the `endpoint-server.com` machine.\n\nSee [the wikipedia page on HTTP Tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel)\nfor more information.\n\nBy default, when proxying `http` traffic, request will simply make a\nstandard proxied `http` request. This is done by making the `url`\nsection of the initial line of the request a fully qualified url to\nthe endpoint.\n\nFor example, it will make a single request that looks like:\n\n```\nHTTP/1.1 GET http://endpoint-server.com/some-url\nHost: proxy-server.com\nOther-Headers: all go here\n\nrequest body or whatever\n```\n\nBecause a pure \"http over http\" tunnel offers no additional security\nor other features, it is generally simpler to go with a\nstraightforward HTTP proxy in this case. However, if you would like\nto force a tunneling proxy, you may set the `tunnel` option to `true`.\n\nYou can also make a standard proxied `http` request by explicitly setting\n`tunnel : false`, but **note that this will allow the proxy to see the traffic\nto/from the destination server**.\n\nIf you are using a tunneling proxy, you may set the\n`proxyHeaderWhiteList` to share certain headers with the proxy.\n\nYou can also set the `proxyHeaderExclusiveList` to share certain\nheaders only with the proxy and not with destination host.\n\nBy default, this set is:\n\n```\naccept\naccept-charset\naccept-encoding\naccept-language\naccept-ranges\ncache-control\ncontent-encoding\ncontent-language\ncontent-length\ncontent-location\ncontent-md5\ncontent-range\ncontent-type\nconnection\ndate\nexpect\nmax-forwards\npragma\nproxy-authorization\nreferer\nte\ntransfer-encoding\nuser-agent\nvia\n```\n\nNote that, when using a tunneling proxy, the `proxy-authorization`\nheader and any headers from custom `proxyHeaderExclusiveList` are\n*never* sent to the endpoint server, but only to the proxy server.\n\n\n### Controlling proxy behaviour using environment variables\n\nThe following environment variables are respected by `request`:\n\n * `HTTP_PROXY` / `http_proxy`\n * `HTTPS_PROXY` / `https_proxy`\n * `NO_PROXY` / `no_proxy`\n\nWhen `HTTP_PROXY` / `http_proxy` are set, they will be used to proxy non-SSL requests that do not have an explicit `proxy` configuration option present. Similarly, `HTTPS_PROXY` / `https_proxy` will be respected for SSL requests that do not have an explicit `proxy` configuration option. It is valid to define a proxy in one of the environment variables, but then override it for a specific request, using the `proxy` configuration option. Furthermore, the `proxy` configuration option can be explicitly set to false / null to opt out of proxying altogether for that request.\n\n`request` is also aware of the `NO_PROXY`/`no_proxy` environment variables. These variables provide a granular way to opt out of proxying, on a per-host basis. It should contain a comma separated list of hosts to opt out of proxying. It is also possible to opt of proxying when a particular destination port is used. Finally, the variable may be set to `*` to opt out of the implicit proxy configuration of the other environment variables.\n\nHere's some examples of valid `no_proxy` values:\n\n * `google.com` - don't proxy HTTP/HTTPS requests to Google.\n * `google.com:443` - don't proxy HTTPS requests to Google, but *do* proxy HTTP requests to Google.\n * `google.com:443, yahoo.com:80` - don't proxy HTTPS requests to Google, and don't proxy HTTP requests to Yahoo!\n * `*` - ignore `https_proxy`/`http_proxy` environment variables altogether.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## UNIX Domain Sockets\n\n`request` supports making requests to [UNIX Domain Sockets](https://en.wikipedia.org/wiki/Unix_domain_socket). To make one, use the following URL scheme:\n\n```js\n/* Pattern */ 'http://unix:SOCKET:PATH'\n/* Example */ request.get('http://unix:/absolute/path/to/unix.socket:/request/path')\n```\n\nNote: The `SOCKET` path is assumed to be absolute to the root of the host file system.\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## TLS/SSL Protocol\n\nTLS/SSL Protocol options, such as `cert`, `key` and `passphrase`, can be\nset directly in `options` object, in the `agentOptions` property of the `options` object, or even in `https.globalAgent.options`. Keep in mind that, although `agentOptions` allows for a slightly wider range of configurations, the recommended way is via `options` object directly, as using `agentOptions` or `https.globalAgent.options` would not be applied in the same way in proxied environments (as data travels through a TLS connection instead of an http/https agent).\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , caFile = path.resolve(__dirname, 'ssl/ca.cert.pem')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    cert: fs.readFileSync(certFile),\n    key: fs.readFileSync(keyFile),\n    passphrase: 'password',\n    ca: fs.readFileSync(caFile)\n};\n\nrequest.get(options);\n```\n\n### Using `options.agentOptions`\n\nIn the example below, we call an API that requires client side SSL certificate\n(in PEM format) with passphrase protected private key (in PEM format) and disable the SSLv3 protocol:\n\n```js\nvar fs = require('fs')\n    , path = require('path')\n    , certFile = path.resolve(__dirname, 'ssl/client.crt')\n    , keyFile = path.resolve(__dirname, 'ssl/client.key')\n    , request = require('request');\n\nvar options = {\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        cert: fs.readFileSync(certFile),\n        key: fs.readFileSync(keyFile),\n        // Or use `pfx` property replacing `cert` and `key` when using private key, certificate and CA certs in PFX or PKCS12 format:\n        // pfx: fs.readFileSync(pfxFilePath),\n        passphrase: 'password',\n        securityOptions: 'SSL_OP_NO_SSLv3'\n    }\n};\n\nrequest.get(options);\n```\n\nIt is able to force using SSLv3 only by specifying `secureProtocol`:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        secureProtocol: 'SSLv3_method'\n    }\n});\n```\n\nIt is possible to accept other certificates than those signed by generally allowed Certificate Authorities (CAs).\nThis can be useful, for example,  when using self-signed certificates.\nTo require a different root certificate, you can specify the signing CA by adding the contents of the CA's certificate file to the `agentOptions`.\nThe certificate the domain presents must be signed by the root certificate specified:\n\n```js\nrequest.get({\n    url: 'https://api.some-server.com/',\n    agentOptions: {\n        ca: fs.readFileSync('ca.cert.pem')\n    }\n});\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Support for HAR 1.2\n\nThe `options.har` property will override the values: `url`, `method`, `qs`, `headers`, `form`, `formData`, `body`, `json`, as well as construct multipart data and read files from disk when `request.postData.params[].fileName` is present without a matching `value`.\n\nA validation step will check if the HAR Request format matches the latest spec (v1.2) and will skip parsing if not matching.\n\n```js\n  var request = require('request')\n  request({\n    // will be ignored\n    method: 'GET',\n    uri: 'http://www.google.com',\n\n    // HTTP Archive Request Object\n    har: {\n      url: 'http://www.mockbin.com/har',\n      method: 'POST',\n      headers: [\n        {\n          name: 'content-type',\n          value: 'application/x-www-form-urlencoded'\n        }\n      ],\n      postData: {\n        mimeType: 'application/x-www-form-urlencoded',\n        params: [\n          {\n            name: 'foo',\n            value: 'bar'\n          },\n          {\n            name: 'hello',\n            value: 'world'\n          }\n        ]\n      }\n    }\n  })\n\n  // a POST request will be sent to http://www.mockbin.com\n  // with body an application/x-www-form-urlencoded body:\n  // foo=bar&hello=world\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n## request(options, callback)\n\nThe first argument can be either a `url` or an `options` object. The only required option is `uri`; all others are optional.\n\n- `uri` || `url` - fully qualified uri or a parsed url object from `url.parse()`\n- `baseUrl` - fully qualified uri string used as the base url. Most useful with `request.defaults`, for example when you want to do many requests to the same domain. If `baseUrl` is `https://example.com/api/`, then requesting `/end/point?test=true` will fetch `https://example.com/api/end/point?test=true`. When `baseUrl` is given, `uri` must also be a string.\n- `method` - http method (default: `\"GET\"`)\n- `headers` - http headers (default: `{}`)\n\n---\n\n- `qs` - object containing querystring values to be appended to the `uri`\n- `qsParseOptions` - object containing options to pass to the [qs.parse](https://github.com/hapijs/qs#parsing-objects) method. Alternatively pass options to the [querystring.parse](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_parse_str_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`\n- `qsStringifyOptions` - object containing options to pass to the [qs.stringify](https://github.com/hapijs/qs#stringifying) method. Alternatively pass options to the  [querystring.stringify](https://nodejs.org/docs/v0.12.0/api/querystring.html#querystring_querystring_stringify_obj_sep_eq_options) method using this format `{sep:';', eq:':', options:{}}`. For example, to change the way arrays are converted to query strings using the `qs` module pass the `arrayFormat` option with one of `indices|brackets|repeat`\n- `useQuerystring` - if true, use `querystring` to stringify and parse\n  querystrings, otherwise use `qs` (default: `false`). Set this option to\n  `true` if you need arrays to be serialized as `foo=bar&foo=baz` instead of the\n  default `foo[0]=bar&foo[1]=baz`.\n\n---\n\n- `body` - entity body for PATCH, POST and PUT requests. Must be a `Buffer`, `String` or `ReadStream`. If `json` is `true`, then `body` must be a JSON-serializable object.\n- `form` - when passed an object or a querystring, this sets `body` to a querystring representation of value, and adds `Content-type: application/x-www-form-urlencoded` header. When passed no options, a `FormData` instance is returned (and is piped to request). See \"Forms\" section above.\n- `formData` - data to pass for a `multipart/form-data` request. See\n  [Forms](#forms) section above.\n- `multipart` - array of objects which contain their own headers and `body`\n  attributes. Sends a `multipart/related` request. See [Forms](#forms) section\n  above.\n  - Alternatively you can pass in an object `{chunked: false, data: []}` where\n    `chunked` is used to specify whether the request is sent in\n    [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding)\n    In non-chunked requests, data items with body streams are not allowed.\n- `preambleCRLF` - append a newline/CRLF before the boundary of your `multipart/form-data` request.\n- `postambleCRLF` - append a newline/CRLF at the end of the boundary of your `multipart/form-data` request.\n- `json` - sets `body` to JSON representation of value and adds `Content-type: application/json` header. Additionally, parses the response body as JSON.\n- `jsonReviver` - a [reviver function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse) that will be passed to `JSON.parse()` when parsing a JSON response body.\n- `jsonReplacer` - a [replacer function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) that will be passed to `JSON.stringify()` when stringifying a JSON request body.\n\n---\n\n- `auth` - a hash containing values `user` || `username`, `pass` || `password`, and `sendImmediately` (optional). See documentation above.\n- `oauth` - options for OAuth HMAC-SHA1 signing. See documentation above.\n- `hawk` - options for [Hawk signing](https://github.com/hueniverse/hawk). The `credentials` key must contain the necessary signing info, [see hawk docs for details](https://github.com/hueniverse/hawk#usage-example).\n- `aws` - `object` containing AWS signing information. Should have the properties `key`, `secret`, and optionally `session` (note that this only works for services that require session as part of the canonical string). Also requires the property `bucket`, unless youâre specifying your `bucket` as part of the path, or the request doesnât use a bucket (i.e. GET Services). If you want to use AWS sign version 4 use the parameter `sign_version` with value `4` otherwise the default is version 2. **Note:** you need to `npm install aws4` first.\n- `httpSignature` - options for the [HTTP Signature Scheme](https://github.com/joyent/node-http-signature/blob/master/http_signing.md) using [Joyent's library](https://github.com/joyent/node-http-signature). The `keyId` and `key` properties must be specified. See the docs for other options.\n\n---\n\n- `followRedirect` - follow HTTP 3xx responses as redirects (default: `true`). This property can also be implemented as function which gets `response` object as a single argument and should return `true` if redirects should continue or `false` otherwise.\n- `followAllRedirects` - follow non-GET HTTP 3xx responses as redirects (default: `false`)\n- `followOriginalHttpMethod` - by default we redirect to HTTP method GET. you can enable this property to redirect to the original HTTP method (default: `false`)\n- `maxRedirects` - the maximum number of redirects to follow (default: `10`)\n- `removeRefererHeader` - removes the referer header when a redirect happens (default: `false`). **Note:** if true, referer header set in the initial request is preserved during redirect chain.\n\n---\n\n- `encoding` - encoding to be used on `setEncoding` of response data. If `null`, the `body` is returned as a `Buffer`. Anything else **(including the default value of `undefined`)** will be passed as the [encoding](http://nodejs.org/api/buffer.html#buffer_buffer) parameter to `toString()` (meaning this is effectively `utf8` by default). (**Note:** if you expect binary data, you should set `encoding: null`.)\n- `gzip` - if `true`, add an `Accept-Encoding` header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response. **Note:** Automatic decoding of the response content is performed on the body data returned through `request` (both through the `request` stream and passed to the callback function) but is not performed on the `response` stream (available from the `response` event) which is the unmodified `http.IncomingMessage` object which may contain compressed data. See example below.\n- `jar` - if `true`, remember cookies for future use (or define your custom cookie jar; see examples section)\n\n---\n\n- `agent` - `http(s).Agent` instance to use\n- `agentClass` - alternatively specify your agent's class name\n- `agentOptions` - and pass its options. **Note:** for HTTPS see [tls API doc for TLS/SSL options](http://nodejs.org/api/tls.html#tls_tls_connect_options_callback) and the [documentation above](#using-optionsagentoptions).\n- `forever` - set to `true` to use the [forever-agent](https://github.com/request/forever-agent) **Note:** Defaults to `http(s).Agent({keepAlive:true})` in node 0.12+\n- `pool` - an object describing which agents to use for the request. If this option is omitted the request will use the global agent (as long as your options allow for it). Otherwise, request will search the pool for your custom agent. If no custom agent is found, a new agent will be created and added to the pool. **Note:** `pool` is used only when the `agent` option is not specified.\n  - A `maxSockets` property can also be provided on the `pool` object to set the max number of sockets for all agents created (ex: `pool: {maxSockets: Infinity}`).\n  - Note that if you are sending multiple requests in a loop and creating\n    multiple new `pool` objects, `maxSockets` will not work as intended. To\n    work around this, either use [`request.defaults`](#requestdefaultsoptions)\n    with your pool options or create the pool object with the `maxSockets`\n    property outside of the loop.\n- `timeout` - integer containing the number of milliseconds to wait for a\nserver to send response headers (and start the response body) before aborting\nthe request. Note that if the underlying TCP connection cannot be established,\nthe OS-wide TCP connection timeout will overrule the `timeout` option ([the\ndefault in Linux can be anywhere from 20-120 seconds][linux-timeout]).\n\n[linux-timeout]: http://www.sekuda.com/overriding_the_default_linux_kernel_20_second_tcp_socket_connect_timeout\n\n---\n\n- `localAddress` - local interface to bind for network connections.\n- `proxy` - an HTTP proxy to be used. Supports proxy Auth with Basic Auth, identical to support for the `url` parameter (by embedding the auth info in the `uri`)\n- `strictSSL` - if `true`, requires SSL certificates be valid. **Note:** to use your own certificate authority, you need to specify an agent that was created with that CA as an option.\n- `tunnel` - controls the behavior of\n  [HTTP `CONNECT` tunneling](https://en.wikipedia.org/wiki/HTTP_tunnel#HTTP_CONNECT_tunneling)\n  as follows:\n   - `undefined` (default) - `true` if the destination is `https`, `false` otherwise\n   - `true` - always tunnel to the destination by making a `CONNECT` request to\n     the proxy\n   - `false` - request the destination as a `GET` request.\n- `proxyHeaderWhiteList` - a whitelist of headers to send to a\n  tunneling proxy.\n- `proxyHeaderExclusiveList` - a whitelist of headers to send\n  exclusively to a tunneling proxy and not to destination.\n\n---\n\n- `time` - if `true`, the request-response cycle (including all redirects) is timed at millisecond resolution. When set, the following properties are added to the response object:\n  - `elapsedTime` Duration of the entire request/response in milliseconds (*deprecated*).\n  - `responseStartTime` Timestamp when the response began (in Unix Epoch milliseconds) (*deprecated*).\n  - `timingStart` Timestamp of the start of the request (in Unix Epoch milliseconds).\n  - `timings` Contains event timestamps in millisecond resolution relative to `timingStart`. If there were redirects, the properties reflect the timings of the final request in the redirect chain:\n    - `socket` Relative timestamp when the [`http`](https://nodejs.org/api/http.html#http_event_socket) module's `socket` event fires. This happens when the socket is assigned to the request.\n    - `lookup` Relative timestamp when the [`net`](https://nodejs.org/api/net.html#net_event_lookup) module's `lookup` event fires. This happens when the DNS has been resolved.\n    - `connect`: Relative timestamp when the [`net`](https://nodejs.org/api/net.html#net_event_connect) module's `connect` event fires. This happens when the server acknowledges the TCP connection.\n    - `response`: Relative timestamp when the [`http`](https://nodejs.org/api/http.html#http_event_response) module's `response` event fires. This happens when the first bytes are received from the server.\n    - `end`: Relative timestamp when the last bytes of the response are received.\n  - `timingPhases` Contains the durations of each request phase. If there were redirects, the properties reflect the timings of the final request in the redirect chain:\n    - `wait`: Duration of socket initialization (`timings.socket`)\n    - `dns`: Duration of DNS lookup (`timings.lookup` - `timings.socket`)\n    - `tcp`: Duration of TCP connection (`timings.connect` - `timings.socket`)\n    - `firstByte`: Duration of HTTP server response (`timings.response` - `timings.connect`)\n    - `download`: Duration of HTTP download (`timings.end` - `timings.response`)\n    - `total`: Duration entire HTTP round-trip (`timings.end`)\n\n- `har` - a [HAR 1.2 Request Object](http://www.softwareishard.com/blog/har-12-spec/#request), will be processed from HAR format into options overwriting matching values *(see the [HAR 1.2 section](#support-for-har-1.2) for details)*\n- `callback` - alternatively pass the request's callback in the options object\n\nThe callback argument gets 3 arguments:\n\n1. An `error` when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object)\n2. An [`http.IncomingMessage`](https://nodejs.org/api/http.html#http_class_http_incomingmessage) object (Response object)\n3. The third is the `response` body (`String` or `Buffer`, or JSON object if the `json` option is supplied)\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Convenience methods\n\nThere are also shorthand methods for different HTTP METHODs and some other conveniences.\n\n\n### request.defaults(options)\n\nThis method **returns a wrapper** around the normal request API that defaults\nto whatever options you pass to it.\n\n**Note:** `request.defaults()` **does not** modify the global request API;\ninstead, it **returns a wrapper** that has your default settings applied to it.\n\n**Note:** You can call `.defaults()` on the wrapper that is returned from\n`request.defaults` to add/override defaults that were previously defaulted.\n\nFor example:\n```js\n//requests using baseRequest() will set the 'x-token' header\nvar baseRequest = request.defaults({\n  headers: {'x-token': 'my-token'}\n})\n\n//requests using specialRequest() will include the 'x-token' header set in\n//baseRequest and will also include the 'special' header\nvar specialRequest = baseRequest.defaults({\n  headers: {special: 'special value'}\n})\n```\n\n### request.METHOD()\n\nThese HTTP method convenience functions act just like `request()` but with a default method already set for you:\n\n- *request.get()*: Defaults to `method: \"GET\"`.\n- *request.post()*: Defaults to `method: \"POST\"`.\n- *request.put()*: Defaults to `method: \"PUT\"`.\n- *request.patch()*: Defaults to `method: \"PATCH\"`.\n- *request.del() / request.delete()*: Defaults to `method: \"DELETE\"`.\n- *request.head()*: Defaults to `method: \"HEAD\"`.\n- *request.options()*: Defaults to `method: \"OPTIONS\"`.\n\n### request.cookie()\n\nFunction that creates a new cookie.\n\n```js\nrequest.cookie('key1=value1')\n```\n### request.jar()\n\nFunction that creates a new cookie jar.\n\n```js\nrequest.jar()\n```\n\n[back to top](#table-of-contents)\n\n\n---\n\n\n## Debugging\n\nThere are at least three ways to debug the operation of `request`:\n\n1. Launch the node process like `NODE_DEBUG=request node script.js`\n   (`lib,request,otherlib` works too).\n\n2. Set `require('request').debug = true` at any time (this does the same thing\n   as #1).\n\n3. Use the [request-debug module](https://github.com/request/request-debug) to\n   view request and response headers and bodies.\n\n[back to top](#table-of-contents)\n\n\n---\n\n## Timeouts\n\nMost requests to external servers should have a timeout attached, in case the\nserver is not responding in a timely manner. Without a timeout, your code may\nhave a socket open/consume resources for minutes or more.\n\nThere are two main types of timeouts: **connection timeouts** and **read\ntimeouts**. A connect timeout occurs if the timeout is hit while your client is\nattempting to establish a connection to a remote machine (corresponding to the\n[connect() call][connect] on the socket). A read timeout occurs any time the\nserver is too slow to send back a part of the response.\n\nThese two situations have widely different implications for what went wrong\nwith the request, so it's useful to be able to distinguish them. You can detect\ntimeout errors by checking `err.code` for an 'ETIMEDOUT' value. Further, you\ncan detect whether the timeout was a connection timeout by checking if the\n`err.connect` property is set to `true`.\n\n```js\nrequest.get('http://10.255.255.1', {timeout: 1500}, function(err) {\n    console.log(err.code === 'ETIMEDOUT');\n    // Set to `true` if the timeout was a connection timeout, `false` or\n    // `undefined` otherwise.\n    console.log(err.connect === true);\n    process.exit(0);\n});\n```\n\n[connect]: http://linux.die.net/man/2/connect\n\n## Examples:\n\n```js\n  var request = require('request')\n    , rand = Math.floor(Math.random()*100000000).toString()\n    ;\n  request(\n    { method: 'PUT'\n    , uri: 'http://mikeal.iriscouch.com/testjs/' + rand\n    , multipart:\n      [ { 'content-type': 'application/json'\n        ,  body: JSON.stringify({foo: 'bar', _attachments: {'message.txt': {follows: true, length: 18, 'content_type': 'text/plain' }}})\n        }\n      , { body: 'I am an attachment' }\n      ]\n    }\n  , function (error, response, body) {\n      if(response.statusCode == 201){\n        console.log('document saved as: http://mikeal.iriscouch.com/testjs/'+ rand)\n      } else {\n        console.log('error: '+ response.statusCode)\n        console.log(body)\n      }\n    }\n  )\n```\n\nFor backwards-compatibility, response compression is not supported by default.\nTo accept gzip-compressed responses, set the `gzip` option to `true`. Note\nthat the body data passed through `request` is automatically decompressed\nwhile the response object is unmodified and will contain compressed data if\nthe server sent a compressed response.\n\n```js\n  var request = require('request')\n  request(\n    { method: 'GET'\n    , uri: 'http://www.google.com'\n    , gzip: true\n    }\n  , function (error, response, body) {\n      // body is the decompressed response body\n      console.log('server encoded the data as: ' + (response.headers['content-encoding'] || 'identity'))\n      console.log('the decoded data is: ' + body)\n    }\n  )\n  .on('data', function(data) {\n    // decompressed data as it is received\n    console.log('decoded chunk: ' + data)\n  })\n  .on('response', function(response) {\n    // unmodified http.IncomingMessage object\n    response.on('data', function(data) {\n      // compressed data as it is received\n      console.log('received ' + data.length + ' bytes of compressed data')\n    })\n  })\n```\n\nCookies are disabled by default (else, they would be used in subsequent requests). To enable cookies, set `jar` to `true` (either in `defaults` or `options`).\n\n```js\nvar request = request.defaults({jar: true})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie jar (instead of `request`âs global cookie jar), set `jar` to an instance of `request.jar()` (either in `defaults` or `options`)\n\n```js\nvar j = request.jar()\nvar request = request.defaults({jar:j})\nrequest('http://www.google.com', function () {\n  request('http://images.google.com')\n})\n```\n\nOR\n\n```js\nvar j = request.jar();\nvar cookie = request.cookie('key1=value1');\nvar url = 'http://www.google.com';\nj.setCookie(cookie, url);\nrequest({url: url, jar: j}, function () {\n  request('http://images.google.com')\n})\n```\n\nTo use a custom cookie store (such as a\n[`FileCookieStore`](https://github.com/mitsuru/tough-cookie-filestore)\nwhich supports saving to and restoring from JSON files), pass it as a parameter\nto `request.jar()`:\n\n```js\nvar FileCookieStore = require('tough-cookie-filestore');\n// NOTE - currently the 'cookies.json' file must already exist!\nvar j = request.jar(new FileCookieStore('cookies.json'));\nrequest = request.defaults({ jar : j })\nrequest('http://www.google.com', function() {\n  request('http://images.google.com')\n})\n```\n\nThe cookie store must be a\n[`tough-cookie`](https://github.com/SalesforceEng/tough-cookie)\nstore and it must support synchronous operations; see the\n[`CookieStore` API docs](https://github.com/SalesforceEng/tough-cookie#cookiestore-api)\nfor details.\n\nTo inspect your cookie jar after a request:\n\n```js\nvar j = request.jar()\nrequest({url: 'http://www.google.com', jar: j}, function () {\n  var cookie_string = j.getCookieString(url); // \"key1=value1; key2=value2; ...\"\n  var cookies = j.getCookies(url);\n  // [{key: 'key1', value: 'value1', domain: \"www.google.com\", ...}, ...]\n})\n```\n\n[back to top](#table-of-contents)\n","owner":{"name":"request","avatar":"https://github.com/request.png","link":"https://github.com/request"},"deprecated":false,"homepage":null,"license":"Apache-2.0","keywords":["http","simple","util","utility"],"computedKeywords":[],"computedMetadata":{},"created":1295656572640,"modified":1527141914156,"lastPublisher":{"name":"simov","email":"simeonvelichkov@gmail.com","avatar":"https://gravatar.com/avatar/ff025f2d0ef869e2080a77f8ef0e1e4b","link":"https://www.npmjs.com/~simov"},"owners":[{"name":"fredkschott","email":"fkschott@gmail.com","avatar":"https://gravatar.com/avatar/184a1f14c759795b94ae1d01b23cc9c7","link":"https://www.npmjs.com/~fredkschott"},{"name":"mikeal","email":"mikeal.rogers@gmail.com","avatar":"https://gravatar.com/avatar/d8eba8dd0e89a0580ec4157681121a79","link":"https://www.npmjs.com/~mikeal"},{"name":"nylen","email":"jnylen@gmail.com","avatar":"https://gravatar.com/avatar/0c4d46844039ba935f69208615e9010c","link":"https://www.npmjs.com/~nylen"},{"name":"simov","email":"simeonvelichkov@gmail.com","avatar":"https://gravatar.com/avatar/ff025f2d0ef869e2080a77f8ef0e1e4b","link":"https://www.npmjs.com/~simov"}],"lastCrawl":"2018-07-04T18:56:11.806Z","_searchInternal":{"concatenatedName":"request","alternativeNames":["request","request","request"],"popularName":"request","downloadsMagnitude":8},"dependents":0,"humanDependents":"0","changelogFilename":"https://raw.githubusercontent.com/request/request/02fc5b1f0123173c308a79c43e804f6fcbefbbaf/CHANGELOG.md","objectID":"request","_highlightResult":{"name":{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]},"description":{"value":"Simplified HTTP <em>request</em> client.","matchLevel":"full","fullyHighlighted":false,"matchedWords":["request"]},"owner":{"name":{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]}},"keywords":[{"value":"http","matchLevel":"none","matchedWords":[]},{"value":"simple","matchLevel":"none","matchedWords":[]},{"value":"util","matchLevel":"none","matchedWords":[]},{"value":"utility","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"fredkschott","matchLevel":"none","matchedWords":[]}},{"name":{"value":"mikeal","matchLevel":"none","matchedWords":[]}},{"name":{"value":"nylen","matchLevel":"none","matchedWords":[]}},{"name":{"value":"simov","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"alternativeNames":[{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]},{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]},{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]}],"popularName":{"value":"<em>request</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["request"]}}},"types":"// Type definitions for request 2.47\n// Project: https://github.com/request/request\n// Definitions by: Carlos Ballesteros Velasco <https://github.com/soywiz>,\n//                 bonnici <https://github.com/bonnici>,\n//                 Bart van der Schoor <https://github.com/Bartvds>,\n//                 Joe Skeen <https://github.com/joeskeen>,\n//                 Christopher Currens <https://github.com/ccurrens>,\n//                 Jon Stevens <https://github.com/lookfirst>,\n//                 Matt R. Wilson <https://github.com/mastermatt>\n//                 Jose Colella <https://github.com/josecolella>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.3\n\n// Imported from: https://github.com/soywiz/typescript-node-definitions/d.ts\n\n/// <reference types=\"node\" />\n\nimport caseless = require('caseless');\nimport stream = require('stream');\nimport http = require('http');\nimport https = require('https');\nimport fs = require('fs');\nimport FormData = require('form-data');\nimport net = require('net');\nimport tough = require('tough-cookie');\nimport { Url } from 'url';\n\ndeclare namespace request {\n    interface RequestAPI<TRequest extends Request, TOptions extends CoreOptions, TUriUrlOptions> {\n        defaults(options: TOptions): RequestAPI<TRequest, TOptions, RequiredUriUrl>;\n        defaults(options: RequiredUriUrl & TOptions): DefaultUriUrlRequestApi<TRequest, TOptions, OptionalUriUrl>;\n\n        (uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        (uri: string, callback?: RequestCallback): TRequest;\n        (options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        get(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        get(uri: string, callback?: RequestCallback): TRequest;\n        get(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        post(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        post(uri: string, callback?: RequestCallback): TRequest;\n        post(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        put(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        put(uri: string, callback?: RequestCallback): TRequest;\n        put(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        head(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        head(uri: string, callback?: RequestCallback): TRequest;\n        head(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        patch(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        patch(uri: string, callback?: RequestCallback): TRequest;\n        patch(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        del(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        del(uri: string, callback?: RequestCallback): TRequest;\n        del(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        delete(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        delete(uri: string, callback?: RequestCallback): TRequest;\n        delete(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n\n        initParams(uri: string, options?: TOptions, callback?: RequestCallback): RequiredUriUrl & TOptions;\n        initParams(uriOrOpts: string | RequiredUriUrl & TOptions, callback?: RequestCallback): RequiredUriUrl & TOptions;\n\n        forever(agentOptions: any, optionsArg: any): TRequest;\n        jar(store?: any): CookieJar;\n        cookie(str: string): Cookie | undefined;\n\n        debug: boolean;\n    }\n\n    interface DefaultUriUrlRequestApi<TRequest extends Request,\n            TOptions extends CoreOptions,\n            TUriUrlOptions> extends RequestAPI<TRequest, TOptions, TUriUrlOptions> {\n        defaults(options: TOptions): DefaultUriUrlRequestApi<TRequest, TOptions, OptionalUriUrl>;\n        (callback?: RequestCallback): TRequest;\n\n        get(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        get(uri: string, callback?: RequestCallback): TRequest;\n        get(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        get(callback?: RequestCallback): TRequest;\n\n        post(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        post(uri: string, callback?: RequestCallback): TRequest;\n        post(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        post(callback?: RequestCallback): TRequest;\n\n        put(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        put(uri: string, callback?: RequestCallback): TRequest;\n        put(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        put(callback?: RequestCallback): TRequest;\n\n        head(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        head(uri: string, callback?: RequestCallback): TRequest;\n        head(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        head(callback?: RequestCallback): TRequest;\n\n        patch(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        patch(uri: string, callback?: RequestCallback): TRequest;\n        patch(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        patch(callback?: RequestCallback): TRequest;\n\n        del(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        del(uri: string, callback?: RequestCallback): TRequest;\n        del(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        del(callback?: RequestCallback): TRequest;\n\n        delete(uri: string, options?: TOptions, callback?: RequestCallback): TRequest;\n        delete(uri: string, callback?: RequestCallback): TRequest;\n        delete(options: TUriUrlOptions & TOptions, callback?: RequestCallback): TRequest;\n        delete(callback?: RequestCallback): TRequest;\n    }\n\n    interface CoreOptions {\n        baseUrl?: string;\n        callback?: RequestCallback;\n        jar?: CookieJar | boolean;\n        formData?: { [key: string]: any };\n        form?: { [key: string]: any } | string;\n        auth?: AuthOptions;\n        oauth?: OAuthOptions;\n        aws?: AWSOptions;\n        hawk?: HawkOptions;\n        qs?: any;\n        qsStringifyOptions?: any;\n        qsParseOptions?: any;\n        json?: any;\n        jsonReviver?: (key: string, value: any) => any;\n        jsonReplacer?: (key: string, value: any) => any;\n        multipart?: RequestPart[] | Multipart;\n        agent?: http.Agent | https.Agent;\n        agentOptions?: any;\n        agentClass?: any;\n        forever?: any;\n        host?: string;\n        port?: number;\n        method?: string;\n        headers?: Headers;\n        body?: any;\n        family?: 4 | 6;\n        followRedirect?: boolean | ((response: http.IncomingMessage) => boolean);\n        followAllRedirects?: boolean;\n        followOriginalHttpMethod?: boolean;\n        maxRedirects?: number;\n        removeRefererHeader?: boolean;\n        encoding?: string | null;\n        pool?: any;\n        timeout?: number;\n        localAddress?: string;\n        proxy?: any;\n        tunnel?: boolean;\n        strictSSL?: boolean;\n        rejectUnauthorized?: boolean;\n        time?: boolean;\n        gzip?: boolean;\n        preambleCRLF?: boolean;\n        postambleCRLF?: boolean;\n        withCredentials?: boolean;\n        key?: Buffer;\n        cert?: Buffer;\n        passphrase?: string;\n        ca?: string | Buffer | string[] | Buffer[];\n        har?: HttpArchiveRequest;\n        useQuerystring?: boolean;\n    }\n\n    interface UriOptions {\n        uri: string | Url;\n    }\n    interface UrlOptions {\n        url: string | Url;\n    }\n    type RequiredUriUrl = UriOptions | UrlOptions;\n\n    type OptionalUriUrl = RequiredUriUrl | {};\n\n    type OptionsWithUri = UriOptions & CoreOptions;\n    type OptionsWithUrl = UrlOptions & CoreOptions;\n    type Options = OptionsWithUri | OptionsWithUrl;\n\n    type RequestCallback = (error: any, response: Response, body: any) => void;\n\n    interface HttpArchiveRequest {\n        url?: string;\n        method?: string;\n        headers?: NameValuePair[];\n        postData?: {\n            mimeType?: string;\n            params?: NameValuePair[];\n        };\n    }\n\n    interface NameValuePair {\n        name: string;\n        value: string;\n    }\n\n    interface Multipart {\n        chunked?: boolean;\n        data?: Array<{\n            'content-type'?: string,\n            body: string\n        }>;\n    }\n\n    interface RequestPart {\n        headers?: Headers;\n        body: any;\n    }\n\n    interface Request extends caseless.Httpified, stream.Stream {\n        readable: boolean;\n        writable: boolean;\n        explicitMethod?: true;\n\n        debug(...args: any[]): void;\n        pipeDest(dest: any): void;\n        qs(q: object, clobber?: boolean): Request;\n        form(): FormData;\n        form(form: any): Request;\n        multipart(multipart: RequestPart[]): Request;\n        json(val: any): Request;\n        aws(opts: AWSOptions, now?: boolean): Request;\n        hawk(opts: HawkOptions): void;\n        auth(username: string, password: string, sendImmediately?: boolean, bearer?: string): Request;\n        oauth(oauth: OAuthOptions): Request;\n        jar(jar: CookieJar): Request;\n\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: 'request', listener: (req: http.ClientRequest) => void): this;\n        on(event: 'response', listener: (resp: Response) => void): this;\n        on(event: 'data', listener: (data: Buffer | string) => void): this;\n        on(event: 'error', listener: (e: Error) => void): this;\n        on(event: 'complete', listener: (resp: Response, body?: string | Buffer) => void): this;\n        on(event: 'pipe', listener: (src: stream.Readable) => void): this;\n        on(event: 'socket', listener: (src: net.Socket) => void): this;\n\n        write(buffer: Buffer | string, cb?: (err?: Error) => void): boolean;\n        write(str: string, encoding?: string, cb?: (err?: Error) => void): boolean;\n        end(cb?: () => void): void;\n        end(chunk: string | Buffer, cb?: () => void): void;\n        end(str: string, encoding?: string, cb?: () => void): void;\n\n        pause(): void;\n        resume(): void;\n        abort(): void;\n        destroy(): void;\n        toJSON(): RequestAsJSON;\n\n        // several of the CoreOptions are copied onto the request instance\n        host?: string;\n        port?: number;\n        followAllRedirects?: boolean;\n        followOriginalHttpMethod?: boolean;\n        maxRedirects?: number;\n        removeRefererHeader?: boolean;\n        encoding?: string | null;\n        timeout?: number;\n        localAddress?: string;\n        strictSSL?: boolean;\n        rejectUnauthorized?: boolean;\n        time?: boolean;\n        gzip?: boolean;\n        preambleCRLF?: boolean;\n        postambleCRLF?: boolean;\n        withCredentials?: boolean;\n        key?: Buffer;\n        cert?: Buffer;\n        passphrase?: string;\n        ca?: string | Buffer | string[] | Buffer[];\n        har?: HttpArchiveRequest;\n\n        // set in `Request.prototype.init`\n        headers: Headers;\n        method: string;\n        pool: false | { [key: string]: http.Agent | https.Agent };\n        dests: stream.Readable[];\n        callback?: RequestCallback;\n        uri: Url & { href: string, pathname: string };\n        proxy: null | string | Url;\n        tunnel: boolean;\n        setHost: boolean;\n        path: string;\n        agent: false | http.Agent | https.Agent;\n        body: Buffer | Buffer[] | string | string[] | stream.Readable;\n        timing?: boolean;\n        src?: stream.Readable;\n\n        // set in `Request.prototype.start`\n        href: string;\n        startTime?: number;\n        startTimeNow?: number;\n        timings?: {\n            socket: number;\n            lookup: number;\n            connect: number;\n            response: number;\n            end: number;\n        };\n\n        // set in `Request.prototype.onRequestResponse`\n        elapsedTime?: number;\n        response?: Response;\n    }\n\n    interface Response extends http.IncomingMessage {\n        statusCode: number;\n        statusMessage: string;\n        request: Request;\n        body: any; // Buffer, string, stream.Readable, or a plain object if `json` was truthy\n        caseless: caseless.Caseless; // case-insensitive access to headers\n        toJSON(): ResponseAsJSON;\n\n        timingStart?: number;\n        elapsedTime?: number;\n        timings?: {\n            socket: number;\n            lookup: number;\n            connect: number;\n            response: number;\n            end: number;\n        };\n        timingPhases?: {\n            wait: number;\n            dns: number;\n            tcp: number;\n            firstByte: number;\n            download: number;\n            total: number;\n        };\n    }\n\n    // aliases for backwards compatibility\n    type ResponseRequest = Request;\n    type RequestResponse = Response;\n\n    interface Headers {\n        [key: string]: any;\n    }\n\n    interface AuthOptions {\n        user?: string;\n        username?: string;\n        pass?: string;\n        password?: string;\n        sendImmediately?: boolean;\n        bearer?: string | (() => string);\n    }\n\n    interface OAuthOptions {\n        callback?: string;\n        consumer_key?: string;\n        consumer_secret?: string;\n        token?: string;\n        token_secret?: string;\n        transport_method?: 'body' | 'header' | 'query';\n        verifier?: string;\n        body_hash?: true | string;\n    }\n\n    interface HawkOptions {\n        credentials: any;\n    }\n\n    interface AWSOptions {\n        secret: string;\n        bucket?: string;\n    }\n\n    interface RequestAsJSON {\n        uri: Url;\n        method: string;\n        headers: Headers;\n    }\n\n    interface ResponseAsJSON {\n        statusCode: number;\n        body: any;\n        headers: Headers;\n        request: RequestAsJSON;\n    }\n\n    type Cookie = tough.Cookie;\n\n    interface CookieJar {\n        setCookie(cookieOrStr: Cookie | string, uri: string | Url, options?: tough.CookieJar.SetCookieOptions): void;\n        getCookieString(uri: string | Url): string;\n        getCookies(uri: string | Url): Cookie[];\n    }\n}\ndeclare var request: request.RequestAPI<request.Request, request.CoreOptions, request.RequiredUriUrl>;\nexport = request;\n","typesLocation":"https://unpkg.com/@types/request/index.d.ts"}}},"lambdaId":"88f9c76b-bc77-4aad-8290-d45b3774f439","additionalFiles":[]},"PROJECT_META":{"projectName":"Hermes","projectDescription":"","projectVersion":"0.0.1","projectRegion":"us-east-1","repoName":"Hermes","repoUrl":"https://github.com/hakur0/Hermes","lastSave":1531254653264}}